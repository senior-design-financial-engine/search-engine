AWSTemplateFormatVersion: '2010-09-09'
Description: 'Backend Infrastructure for Financial News Engine'

Parameters:
  EnvironmentName:
    Description: Environment name
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
  
  BackendDomainName:
    Description: Custom domain name for the backend ALB (e.g., api.yourdomain.com)
    Type: String
    Default: ""
  
  CorsAllowedOrigins:
    Description: Comma-separated list of domains allowed to access the API (include protocol)
    Type: String
    Default: "https://financialnewsengine.com,https://www.financialnewsengine.com,http://localhost:3000"
  
  VpcStackName:
    Description: Name of the VPC CloudFormation stack
    Type: String
    Default: financial-news-vpc
  
  InstanceType:
    Description: EC2 instance type for the backend servers
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  
  AMIId:
    Description: AMI ID for the EC2 instances
    Type: AWS::EC2::Image::Id
    Default: ami-0261755bbcb8c4a84  # Ubuntu 20.04 LTS in us-east-1 (update for your region)
  
  ElasticsearchEndpoint:
    Description: Endpoint URL for Elasticsearch
    Type: String
    Default: https://your-elasticsearch-endpoint.es.amazonaws.com
  
  ElasticsearchApiKey:
    Description: API Key for Elasticsearch
    Type: String
    NoEcho: true
  
  ElasticsearchIndex:
    Description: Elasticsearch index name
    Type: String
    Default: financial_news
  
  EsNumberOfShards:
    Description: Number of shards for Elasticsearch index
    Type: Number
    Default: 3
  
  EsNumberOfReplicas:
    Description: Number of replicas for Elasticsearch index
    Type: Number
    Default: 2
  
  MinSize:
    Description: Minimum number of EC2 instances in the Auto Scaling Group
    Type: Number
    Default: 2
    MinValue: 1
  
  MaxSize:
    Description: Maximum number of EC2 instances in the Auto Scaling Group
    Type: Number
    Default: 6
    MinValue: 1
  
  DesiredCapacity:
    Description: Desired number of EC2 instances in the Auto Scaling Group
    Type: Number
    Default: 2
    MinValue: 1
  
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
  
  SSLCertificateArn:
    Description: ARN of the SSL certificate from AWS Certificate Manager
    Type: String
    Default: "arn:aws:acm:us-east-1:YOUR_ACCOUNT_ID:certificate/YOUR_CERTIFICATE_ID"

  HostedZoneId:
    Type: String
    Description: (Optional) Route 53 Hosted Zone ID for DNS Records. Leave empty to skip DNS record creation.
    Default: ""

Conditions:
  HasDomainName: !Not [!Equals [!Ref BackendDomainName, ""]]
  CreateDNSRecord: !And
    - !Condition HasDomainName
    - !Not [!Equals [!Ref HostedZoneId, ""]]

Resources:
  # S3 Bucket for storing deployment files
  FinancialNewsAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "financial-news-assets-${AWS::AccountId}-${AWS::Region}"
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-assets-bucket
        - Key: Environment
          Value: !Ref EnvironmentName

  # SSL Certificate
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: HasDomainName
    Properties:
      DomainName: !Ref BackendDomainName
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-certificate
        - Key: Environment
          Value: !Ref EnvironmentName

  # IAM Role for EC2 instances
  BackendInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
      Path: /
      Policies:
        - PolicyName: ESAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'es:ESHttpGet'
                  - 'es:ESHttpPost'
                  - 'es:ESHttpPut'
                  - 'es:ESHttpDelete'
                Resource: '*'
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:ListBucket'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:CopyObject'
                Resource: 
                  - !Sub 'arn:aws:s3:::${FinancialNewsAssetsBucket}/*'
                  - !Sub 'arn:aws:s3:::${FinancialNewsAssetsBucket}'
        - PolicyName: CloudFormationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:SignalResource'
                Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*'

  # IAM Instance Profile for EC2 instances
  BackendInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref BackendInstanceRole

  # Standard SSM Parameters for the application
  ElasticsearchEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /financial-news/elasticsearch/endpoint
      Type: String
      Value: !Ref ElasticsearchEndpoint
      Description: Elasticsearch endpoint URL
      Tags:
        Environment: !Ref EnvironmentName

  ElasticsearchApiKeyParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /financial-news/elasticsearch/api_key
      Type: String
      Value: !Ref ElasticsearchApiKey
      Description: Elasticsearch API key 
      Tags:
        Environment: !Ref EnvironmentName

  ElasticsearchIndexParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /financial-news/elasticsearch/index
      Type: String
      Value: !Ref ElasticsearchIndex
      Description: Elasticsearch index name
      Tags:
        Environment: !Ref EnvironmentName

  ElasticsearchShardsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /financial-news/elasticsearch/shards
      Type: String
      Value: !Ref EsNumberOfShards
      Description: Number of Elasticsearch index shards
      Tags:
        Environment: !Ref EnvironmentName

  ElasticsearchReplicasParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /financial-news/elasticsearch/replicas
      Type: String
      Value: !Ref EsNumberOfReplicas
      Description: Number of Elasticsearch index replicas
      Tags:
        Environment: !Ref EnvironmentName

  EnvironmentNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /financial-news/environment
      Type: String
      Value: !Ref EnvironmentName
      Description: Application environment name
      Tags:
        Environment: !Ref EnvironmentName

  # Security Group for backend instances
  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH and HTTP/HTTPS access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VPCID"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-sg
        - Key: Environment
          Value: !Ref EnvironmentName

  # Launch Template for backend EC2 instances
  BackendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-backend-launch-template
      LaunchTemplateData:
        ImageId: !Ref AMIId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref BackendSecurityGroup
          - Fn::ImportValue: !Sub "${VpcStackName}-AppServerSG"
        IamInstanceProfile:
          Name: !Ref BackendInstanceProfile
        BlockDeviceMappings:
          - DeviceName: /dev/xvda  # Root volume
            Ebs:
              VolumeSize: 30  # Increased from default to ensure enough space
              VolumeType: gp3
              DeleteOnTermination: true
              Encrypted: true
          - DeviceName: /dev/sdf  # Dedicated volume for financial-news-engine
            Ebs:
              VolumeSize: 20
              VolumeType: gp3
              DeleteOnTermination: true
              Encrypted: true
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            # Log to a file
            exec > >(tee /var/log/user-data.log) 2>&1
            
            echo "Starting backend initialization..."
            # Create a status file to track progress
            STATUS_FILE="/var/log/backend-init-status.txt"
            echo "STARTED" > $STATUS_FILE
            
            # Update system packages
            apt-get update && apt-get install -y python3-pip awscli python3-dev git jq curl wget xfsprogs nvme-cli
            
            # Install CloudFormation helper scripts
            pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
            ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
            
            # Mount dedicated volume
            echo "Setting up dedicated volume for /opt/financial-news-engine"
            DEVICE_NAME="/dev/nvme1n1"  # AWS NVMe naming for /dev/sdf
            if [ -e $DEVICE_NAME ]; then
              echo "Device found at $DEVICE_NAME"
              mkfs -t ext4 $DEVICE_NAME
              mkdir -p /opt/financial-news-engine
              echo "$DEVICE_NAME /opt/financial-news-engine ext4 defaults,nofail 0 2" >> /etc/fstab
              mount /opt/financial-news-engine
            else
              echo "WARNING: Device $DEVICE_NAME not found. Falling back to root volume."
              mkdir -p /opt/financial-news-engine
            fi
            
            chmod 755 /opt/financial-news-engine
            
            # Create necessary directories
            mkdir -p /opt/financial-news-engine/logs
            mkdir -p /opt/financial-news-engine/deploy_scripts
            
            # Create scripts directly instead of downloading from S3
            cat > /opt/financial-news-engine/deploy_scripts/create_env_file.sh << 'EOF'
            #!/bin/bash
            
            # Script to create environment file for the financial news engine
            ENV_FILE="/opt/financial-news-engine/.env"
            
            # Fetch parameters from AWS SSM Parameter Store
            fetch_param() {
              aws ssm get-parameter --name "$1" --with-decryption --query "Parameter.Value" --output text
            }
            
            # Create env file
            echo "Creating environment file at $ENV_FILE"
            
            cat > $ENV_FILE << EOL
            # Environment variables for Financial News Engine
            ELASTICSEARCH_ENDPOINT=$(fetch_param "/financial-news/elasticsearch/endpoint")
            ELASTICSEARCH_API_KEY=$(fetch_param "/financial-news/elasticsearch/api_key")
            ELASTICSEARCH_INDEX=$(fetch_param "/financial-news/elasticsearch/index")
            ES_NUMBER_OF_SHARDS=$(fetch_param "/financial-news/elasticsearch/shards")
            ES_NUMBER_OF_REPLICAS=$(fetch_param "/financial-news/elasticsearch/replicas")
            ENVIRONMENT=$(fetch_param "/financial-news/environment")
            CORS_ALLOWED_ORIGINS="${CorsAllowedOrigins}"
            EOL
            
            echo "Environment file created successfully."
            EOF
            
            cat > /opt/financial-news-engine/deploy_scripts/lifecycle_handler.sh << 'EOF'
            #!/bin/bash
            
            # This script handles AWS Auto Scaling lifecycle hooks
            
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/region)
            
            # Get lifecycle action token and name
            TOKEN=$(aws autoscaling describe-lifecycle-hooks \
              --region $REGION \
              --auto-scaling-group-name $(aws autoscaling describe-auto-scaling-instances \
                --instance-ids $INSTANCE_ID \
                --region $REGION \
                --query "AutoScalingInstances[0].AutoScalingGroupName" \
                --output text) \
              --query "LifecycleHooks[?contains(NotificationMetadata, 'terminating')].NotificationToken | [0]" \
              --output text)
            
            HOOK_NAME=$(aws autoscaling describe-lifecycle-hooks \
              --region $REGION \
              --auto-scaling-group-name $(aws autoscaling describe-auto-scaling-instances \
                --instance-ids $INSTANCE_ID \
                --region $REGION \
                --query "AutoScalingInstances[0].AutoScalingGroupName" \
                --output text) \
              --query "LifecycleHooks[?contains(NotificationMetadata, 'terminating')].LifecycleHookName | [0]" \
              --output text)
            
            # Perform any cleanup necessary before termination
            echo "Performing cleanup before termination..."
            
            # Stop application gracefully
            systemctl stop financial-news.service
            
            # Flush logs
            sync
            
            # Complete lifecycle action if token and hook name are available
            if [ ! -z "$TOKEN" ] && [ ! -z "$HOOK_NAME" ]; then
              ASG_NAME=$(aws autoscaling describe-auto-scaling-instances \
                --instance-ids $INSTANCE_ID \
                --region $REGION \
                --query "AutoScalingInstances[0].AutoScalingGroupName" \
                --output text)
              
              aws autoscaling complete-lifecycle-action \
                --lifecycle-hook-name $HOOK_NAME \
                --auto-scaling-group-name $ASG_NAME \
                --lifecycle-action-token $TOKEN \
                --lifecycle-action-result CONTINUE \
                --region $REGION
              
              echo "Lifecycle action completed."
            else
              echo "Could not find lifecycle token or hook name."
            fi
            EOF
            
            # Make scripts executable
            chmod +x /opt/financial-news-engine/deploy_scripts/*.sh
            
            # Run the environment file creator script
            /opt/financial-news-engine/deploy_scripts/create_env_file.sh
            
            # Create Flask application code directly
            cat > /opt/financial-news-engine/app.py << 'EOF'
            from flask import Flask, jsonify, request, Response
            import os
            import json
            import logging
            from flask_cors import CORS
            import elasticsearch
            import requests
            
            # Ensure log directory exists
            os.makedirs("/opt/financial-news-engine/logs", exist_ok=True)
            
            # Configure logging
            logging.basicConfig(
                level=logging.INFO,
                format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                handlers=[
                    logging.FileHandler("/opt/financial-news-engine/logs/app.log"),
                    logging.StreamHandler()
                ]
            )
            logger = logging.getLogger(__name__)
            
            # Initialize Flask app
            app = Flask(__name__)
            
            # Configure CORS
            cors_origins = os.environ.get('CORS_ALLOWED_ORIGINS', '').split(',')
            CORS(app, resources={r"/*": {"origins": cors_origins}})
            
            # Elasticsearch configuration
            ES_ENDPOINT = os.environ.get('ELASTICSEARCH_ENDPOINT')
            ES_API_KEY = os.environ.get('ELASTICSEARCH_API_KEY')
            ES_INDEX = os.environ.get('ELASTICSEARCH_INDEX', 'financial_news')
            
            # Initialize Elasticsearch client
            try:
                es_client = elasticsearch.Elasticsearch(
                    [ES_ENDPOINT],
                    api_key=ES_API_KEY,
                    use_ssl=True,
                    verify_certs=True,
                    connection_class=elasticsearch.connection.RequestsHttpConnection
                )
                logger.info(f"Connected to Elasticsearch at {ES_ENDPOINT}")
            except Exception as e:
                logger.error(f"Failed to connect to Elasticsearch: {str(e)}")
                es_client = None
            
            @app.route('/health')
            def health():
                """Health check endpoint"""
                es_status = "connected" if es_client and es_client.ping() else "disconnected"
                return jsonify({
                    "status": "healthy",
                    "elasticsearch": es_status
                })
            
            @app.route('/api/search', methods=['GET'])
            def search():
                """Search endpoint for financial news"""
                query = request.args.get('q', '')
                size = int(request.args.get('size', 10))
                page = int(request.args.get('page', 1))
                from_val = (page - 1) * size
                
                if not query:
                    return jsonify({"error": "Query parameter 'q' is required"}), 400
                
                if not es_client:
                    return jsonify({"error": "Elasticsearch connection not available"}), 503
                
                try:
                    search_query = {
                        "query": {
                            "multi_match": {
                                "query": query,
                                "fields": ["title^3", "summary^2", "content", "author", "source"],
                                "fuzziness": "AUTO"
                            }
                        },
                        "highlight": {
                            "fields": {
                                "title": {},
                                "summary": {},
                                "content": {}
                            },
                            "pre_tags": ["<strong>"],
                            "post_tags": ["</strong>"]
                        },
                        "from": from_val,
                        "size": size
                    }
                    
                    results = es_client.search(index=ES_INDEX, body=search_query)
                    
                    # Transform results
                    total = results['hits']['total']['value']
                    hits = []
                    
                    for hit in results['hits']['hits']:
                        source = hit['_source']
                        highlight = hit.get('highlight', {})
                        
                        # Get highlighted fields or fall back to original content
                        title = highlight.get('title', [source.get('title', '')])[0]
                        summary = highlight.get('summary', [source.get('summary', '')])[0]
                        
                        hits.append({
                            "id": hit['_id'],
                            "title": title,
                            "summary": summary,
                            "author": source.get('author', ''),
                            "source": source.get('source', ''),
                            "published_date": source.get('published_date', ''),
                            "url": source.get('url', ''),
                            "score": hit['_score']
                        })
                    
                    response = {
                        "total": total,
                        "page": page,
                        "size": size,
                        "total_pages": (total + size - 1) // size,
                        "results": hits
                    }
                    
                    return jsonify(response)
                except Exception as e:
                    logger.error(f"Error searching Elasticsearch: {str(e)}")
                    return jsonify({"error": "Search failed", "details": str(e)}), 500
            
            @app.route('/api/news/<news_id>', methods=['GET'])
            def get_news(news_id):
                """Get specific news article by ID"""
                if not es_client:
                    return jsonify({"error": "Elasticsearch connection not available"}), 503
                
                try:
                    result = es_client.get(index=ES_INDEX, id=news_id)
                    return jsonify(result['_source'])
                except elasticsearch.NotFoundError:
                    return jsonify({"error": "News article not found"}), 404
                except Exception as e:
                    logger.error(f"Error retrieving news article: {str(e)}")
                    return jsonify({"error": "Failed to retrieve news article", "details": str(e)}), 500
            
            if __name__ == '__main__':
                app.run(host='0.0.0.0', port=5000)
            EOF
            
            # Create requirements.txt
            cat > /opt/financial-news-engine/requirements.txt << 'EOF'
            flask==2.0.1
            flask-cors==3.0.10
            elasticsearch==7.14.0
            gunicorn==20.1.0
            requests==2.26.0
            python-dotenv==0.19.0
            EOF
            
            # Create systemd service file
            cat > /etc/systemd/system/financial-news.service << 'EOF'
            [Unit]
            Description=Financial News API
            After=network.target
            
            [Service]
            User=root
            WorkingDirectory=/opt/financial-news-engine
            EnvironmentFile=/opt/financial-news-engine/.env
            ExecStart=/usr/local/bin/gunicorn -b 0.0.0.0:5000 app:app
            Restart=always
            RestartSec=5
            
            [Install]
            WantedBy=multi-user.target
            EOF
            
            # Install app dependencies
            cd /opt/financial-news-engine && pip3 install -r requirements.txt
            
            # Start and enable service
            systemctl daemon-reload
            systemctl enable financial-news.service
            systemctl start financial-news.service
            
            # Install Amazon CloudWatch agent
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb
            dpkg -i /tmp/amazon-cloudwatch-agent.deb
            
            # Configure CloudWatch agent
            mkdir -p /opt/aws/amazon-cloudwatch-agent/etc/
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOL'
            {
              "agent": {
                "metrics_collection_interval": 60,
                "run_as_user": "root"
              },
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/syslog",
                        "log_group_name": "/financial-news/system",
                        "log_stream_name": "{instance_id}"
                      },
                      {
                        "file_path": "/var/log/user-data.log",
                        "log_group_name": "/financial-news/initialization",
                        "log_stream_name": "{instance_id}"
                      }
                    ]
                  }
                }
              },
              "metrics": {
                "metrics_collected": {
                  "disk": {
                    "measurement": ["used_percent"],
                    "resources": ["/"]
                  },
                  "mem": {
                    "measurement": ["mem_used_percent"]
                  }
                }
              }
            }
            EOL
            
            # Start CloudWatch agent
            systemctl enable amazon-cloudwatch-agent
            systemctl start amazon-cloudwatch-agent
            
            # Final status
            echo "Initialization completed successfully"
            echo "COMPLETED" > $STATUS_FILE
            
            # Signal completion to CloudFormation
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BackendAutoScalingGroup --region ${AWS::Region}

  # Backend Auto Scaling Group
  BackendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: HTTPSListener
    CreationPolicy:
      ResourceSignal:
        Count: !Ref DesiredCapacity
        Timeout: "PT15M"
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-backend-asg
      LaunchTemplate:
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: !GetAtt BackendLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      TargetGroupARNs:
        - !Ref BackendTargetGroup
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnet1ID"
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnet2ID"
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-instance
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref EnvironmentName
          PropagateAtLaunch: true

  # Auto Scaling Lifecycle Hook for termination
  BackendTerminationLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref BackendAutoScalingGroup
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationMetadata: !Sub |
        {"action": "terminating", "hook_name": "BackendTerminationLifecycleHook"}

  # Auto Scaling Policy for CPU
  CPUScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref BackendAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 70.0
        DisableScaleIn: false

  # Load Balancer Security Group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP/HTTPS access to ALB
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-lb-sg
        - Key: Environment
          Value: !Ref EnvironmentName

  # Application Load Balancer for backend
  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-backend-alb
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub "${VpcStackName}-PublicSubnet1ID"
        - Fn::ImportValue: !Sub "${VpcStackName}-PublicSubnet2ID"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-alb
        - Key: Environment
          Value: !Ref EnvironmentName

  # Target Group for backend instances
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-backend-tg
      Protocol: HTTP
      Port: 5000
      TargetType: instance
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VPCID"
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckPort: "5000"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-tg
        - Key: Environment
          Value: !Ref EnvironmentName

  # HTTP Listener for ALB
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: 443
            StatusCode: HTTP_301

  # HTTPS Listener for ALB
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
      Certificates:
        - CertificateArn: !If [HasDomainName, !Ref SSLCertificate, !Ref SSLCertificateArn]
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  # DNS Record for ALB (if domain name is provided)
  BackendDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNSRecord
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref BackendDomainName
      Type: A
      AliasTarget:
        HostedZoneId: !GetAtt BackendLoadBalancer.CanonicalHostedZoneID
        DNSName: !GetAtt BackendLoadBalancer.DNSName

Outputs:
  BackendURL:
    Description: URL of the backend API
    Value: !If [HasDomainName, !Sub "https://${BackendDomainName}", !Sub "https://${BackendLoadBalancer.DNSName}"]
  
  AssetsBucketName:
    Description: S3 bucket name for financial news assets
    Value: !Ref FinancialNewsAssetsBucket
    Export:
      Name: !Sub "${AWS::StackName}-AssetsBucketName" 