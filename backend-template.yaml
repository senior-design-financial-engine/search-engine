AWSTemplateFormatVersion: '2010-09-09'
Description: 'Backend Infrastructure for Financial News Engine'

Parameters:
  EnvironmentName:
    Description: Environment name
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
  
  BackendDomainName:
    Description: Custom domain name for the backend ALB (e.g., api.yourdomain.com)
    Type: String
    Default: ""
  
  CorsAllowedOrigins:
    Description: Comma-separated list of domains allowed to access the API (e.g., https://financialnewsengine.com). Must include all frontend domains, CloudFront domains, and localhost if used for development.
    Type: String
    Default: "https://financialnewsengine.com,https://www.financialnewsengine.com,http://localhost:3000"
  
  VpcStackName:
    Description: Name of the VPC CloudFormation stack
    Type: String
    Default: financial-news-vpc
  
  InstanceType:
    Description: EC2 instance type for the backend servers
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  
  AMIId:
    Description: AMI ID for the EC2 instances
    Type: AWS::EC2::Image::Id
    Default: ami-0261755bbcb8c4a84  # Ubuntu 20.04 LTS in us-east-1 (update for your region)
  
  ElasticsearchEndpoint:
    Description: Endpoint URL for Elasticsearch
    Type: String
    Default: https://your-elasticsearch-endpoint.es.amazonaws.com
  
  ElasticsearchApiKey:
    Description: API Key for Elasticsearch
    Type: String
    NoEcho: true
  
  ElasticsearchIndex:
    Description: Elasticsearch index name
    Type: String
    Default: financial_news
  
  EsNumberOfShards:
    Description: Number of shards for Elasticsearch index
    Type: Number
    Default: 3
  
  EsNumberOfReplicas:
    Description: Number of replicas for Elasticsearch index
    Type: Number
    Default: 2
  
  MinSize:
    Description: Minimum number of EC2 instances in the Auto Scaling Group
    Type: Number
    Default: 2
    MinValue: 1
  
  MaxSize:
    Description: Maximum number of EC2 instances in the Auto Scaling Group
    Type: Number
    Default: 6
    MinValue: 1
  
  DesiredCapacity:
    Description: Desired number of EC2 instances in the Auto Scaling Group
    Type: Number
    Default: 2
    MinValue: 1
  
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
  
  SSLCertificateArn:
    Description: ARN of the SSL certificate from AWS Certificate Manager
    Type: String
    Default: "arn:aws:acm:us-east-1:YOUR_ACCOUNT_ID:certificate/YOUR_CERTIFICATE_ID"

  BackendApiCodeKey:
    Description: S3 key for the backend API code
    Type: String
    Default: api/backend-api.yaml

  HostedZoneId:
    Type: String
    Description: (Optional) Route 53 Hosted Zone ID for DNS Records. Leave empty to skip DNS record creation.
    Default: ""

Conditions:
  HasDomainName: !Not [!Equals [!Ref BackendDomainName, ""]]
  CreateDNSRecord: !And
    - !Condition HasDomainName
    - !Not [!Equals [!Ref HostedZoneId, ""]]

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0261755bbcb8c4a84  # Ubuntu 20.04 LTS
    us-east-2:
      AMI: ami-0430580de6244e02e  # Ubuntu 20.04 LTS
    us-west-1:
      AMI: ami-04669a22aad391419  # Ubuntu 20.04 LTS
    us-west-2:
      AMI: ami-0efa651876de2a5ce  # Ubuntu 20.04 LTS
    eu-west-1:
      AMI: ami-0a8e758f5e873d1c1  # Ubuntu 20.04 LTS

Resources:
  # SSL Certificate
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: HasDomainName
    Properties:
      DomainName: !Ref BackendDomainName
      ValidationMethod: DNS
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-certificate
        - Key: Environment
          Value: !Ref EnvironmentName

  # IAM Role for EC2 instances
  BackendInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
      Path: /
      Policies:
        - PolicyName: ESAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'es:ESHttpGet'
                  - 'es:ESHttpPost'
                  - 'es:ESHttpPut'
                  - 'es:ESHttpDelete'
                Resource: '*'
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:ListBucket'
                Resource: 
                  - 'arn:aws:s3:::financial-news-assets/*'
                  - 'arn:aws:s3:::financial-news-assets'
        - PolicyName: SSMParameterStorePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:GetParameter'
                  - 'ssm:GetParameters'
                  - 'ssm:GetParametersByPath'
                Resource: 
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/financial-news/*'
        - PolicyName: SSMRemoteCommandsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:DescribeInstanceInformation'
                  - 'ssm:GetCommandInvocation'
                  - 'ssm:ListCommandInvocations'
                  - 'ssm:ListCommands'
                  - 'ssm:SendCommand'
                  - 'ssm:GetDocument'
                  - 'ssm:ListDocuments'
                Resource: '*'

  # Instance Profile for EC2 instances
  BackendInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref BackendInstanceRole

  # Security Group for Backend EC2 instances
  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for backend servers
      VpcId: 
        Fn::ImportValue: !Sub "${VpcStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 5000  # Flask default port
          ToPort: 5000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-sg
        - Key: Environment
          Value: !Ref EnvironmentName
      # Reference the App Server Security Group from VPC Stack for additional security rules
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic

  # Security Group for Application Load Balancer
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Application Load Balancer
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alb-sg
        - Key: Environment
          Value: !Ref EnvironmentName

  # Launch Template for Auto Scaling Group
  BackendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - install_packages
            - setup_basic_app
            - configure_services
            - start_services
        
        install_packages:
          packages:
            apt:
              python3: []
              python3-pip: []
              python3-dev: []
              git: []
              wget: []
              curl: []
              jq: []
              python3-yaml: []
          commands:
            01_install_cloudwatch_agent:
              command: |
                if [ ! -f "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl" ]; then
                  wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb -O /tmp/amazon-cloudwatch-agent.deb
                  dpkg -i /tmp/amazon-cloudwatch-agent.deb
                else
                  echo "CloudWatch agent already installed"
                fi
        
        setup_basic_app:
          commands:
            01_create_app_directory:
              command: |
                # The directory structure will be created by the 02_create_basic_app step
                echo "Application directory will be created in the next step"
            
            02_create_basic_app:
              command: |
                # Create a basic Flask app directory
                mkdir -p /opt/financial-news-engine
                mkdir -p /opt/financial-news-engine/logs
                chmod 755 /opt/financial-news-engine
                
                # Fetch backend-api.yaml from S3
                mkdir -p /tmp/scripts
                aws s3 cp s3://financial-news-assets/${BackendApiCodeKey} /tmp/scripts/backend-api.yaml
                
                # Extract app code, requirements, and verification script from the YAML file
                python3 -c "
                import yaml
                try:
                    with open('/tmp/scripts/backend-api.yaml', 'r') as f:
                        api_config = yaml.safe_load(f)
                    
                    # Create app.py from app_code section
                    with open('/opt/financial-news-engine/app.py', 'w') as f:
                        f.write(api_config.get('app_code', ''))
                    
                    # Create requirements.txt from requirements section
                    with open('/opt/financial-news-engine/requirements.txt', 'w') as f:
                        f.write(api_config.get('requirements', ''))
                    
                    # Create verify_startup.sh from verification_script section
                    with open('/opt/financial-news-engine/verify_startup.sh', 'w') as f:
                        f.write(api_config.get('verification_script', ''))
                    
                    # Create service file from service_definition section
                    with open('/etc/systemd/system/financial-news.service', 'w') as f:
                        f.write(api_config.get('service_definition', ''))
                except Exception as e:
                    print(f'Error extracting scripts: {str(e)}')
                    # Create fallback app.py as a simple health check
                    with open('/opt/financial-news-engine/app.py', 'w') as f:
                        f.write('from flask import Flask, jsonify\\n\\napp = Flask(__name__)\\n\\n@app.route(\"/health\")\\ndef health():\\n    return jsonify({\"status\": \"healthy\"})\\n\\nif __name__ == \"__main__\":\\n    app.run(host=\"0.0.0.0\", port=5000)')
                    
                    # Create fallback requirements.txt with minimal dependencies
                    with open('/opt/financial-news-engine/requirements.txt', 'w') as f:
                        f.write('flask==2.0.1\\ngunicorn==20.1.0')
                    
                    # Create fallback verify_startup.sh
                    with open('/opt/financial-news-engine/verify_startup.sh', 'w') as f:
                        f.write('#!/bin/bash\\necho \"Basic verification script\"\\nexit 0')
                "
                chmod +x /opt/financial-news-engine/verify_startup.sh
                
                # Install dependencies
                cd /opt/financial-news-engine
                pip3 install -r requirements.txt
        
        configure_services:
          files:
            /opt/financial-news-engine/.env:
              content: !Sub |
                ELASTICSEARCH_URL=${ElasticsearchEndpoint}
                ELASTICSEARCH_API_KEY=${ElasticsearchApiKey}
                ELASTICSEARCH_INDEX=${ElasticsearchIndex}
                ES_NUMBER_OF_SHARDS=${EsNumberOfShards}
                ES_NUMBER_OF_REPLICAS=${EsNumberOfReplicas}
                ENVIRONMENT=${EnvironmentName}
                CORS_ALLOWED_ORIGINS=${CorsAllowedOrigins}
              mode: "000644"
              owner: "root"
              group: "root"
            
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: |
                {
                  "agent": {
                    "metrics_collection_interval": 60,
                    "run_as_user": "root"
                  },
                  "logs": {
                    "logs_collected": {
                      "files": {
                        "collect_list": [
                          {
                            "file_path": "/var/log/syslog",
                            "log_group_name": "/financial-news/system",
                            "log_stream_name": "{instance_id}"
                          },
                          {
                            "file_path": "/var/log/user-data.log",
                            "log_group_name": "/financial-news/initialization",
                            "log_stream_name": "{instance_id}"
                          },
                          {
                            "file_path": "/opt/financial-news-engine/logs/backend.log",
                            "log_group_name": "/financial-news/application",
                            "log_stream_name": "{instance_id}-app"
                          },
                          {
                            "file_path": "/opt/financial-news-engine/logs/error.log",
                            "log_group_name": "/financial-news/application",
                            "log_stream_name": "{instance_id}-error"
                          },
                          {
                            "file_path": "/opt/financial-news-engine/logs/access.log",
                            "log_group_name": "/financial-news/application",
                            "log_stream_name": "{instance_id}-access"
                          }
                        ]
                      }
                    }
                  },
                  "metrics": {
                    "metrics_collected": {
                      "disk": {
                        "measurement": [
                          "used_percent"
                        ],
                        "resources": [
                          "/"
                        ]
                      },
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "statsd": {
                        "metrics_collection_interval": 10,
                        "metrics_aggregation_interval": 60,
                        "service_address": ":8125"
                      }
                    }
                  }
                }
              mode: "000644"
              owner: "root"
              group: "root"
        
        start_services:
          commands:
            01_reload_systemd:
              command: systemctl daemon-reload
            
            02_enable_financial_news:
              command: systemctl enable financial-news.service
            
            03_start_financial_news:
              command: systemctl start financial-news.service
            
            04_start_cloudwatch_agent:
              command: |
                systemctl daemon-reload
                systemctl enable amazon-cloudwatch-agent
                systemctl start amazon-cloudwatch-agent
            
            05_verify_service:
              command: |
                /opt/financial-news-engine/verify_startup.sh || echo "Service verification failed but continuing"
    
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-backend-lt
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: !Ref AMIId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref BackendSecurityGroup
          - Fn::ImportValue: !Sub "${VpcStackName}-AppServerSG"
        IamInstanceProfile:
          Name: !Ref BackendInstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            
            # Log function
            function log {
              echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a /var/log/user-data.log
            }
            
            # Create a status file to track progress
            STATUS_FILE="/var/log/backend-init-status.txt"
            echo "STARTED" > $STATUS_FILE
            
            log "Starting backend initialization..."
            
            # Update system packages
            log "Updating system packages"
            apt-get update && apt-get install -y python3-pip awscli
            
            # Install AWS CloudFormation helpers
            log "Installing AWS CloudFormation helpers"
            pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            
            # Create app directory
            log "Creating application directory"
            mkdir -p /opt/financial-news-engine
            mkdir -p /opt/financial-news-engine/logs
            mkdir -p /opt/financial-news-engine/deploy_scripts
            
            # Create lifecyle hook handler script
            log "Creating lifecycle hook handler script"
            cat > /opt/financial-news-engine/deploy_scripts/lifecycle_handler.sh << 'EOF'
            #!/bin/bash
            
            LOG_FILE="/var/log/lifecycle-hooks.log"
            
            function log {
              echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a $LOG_FILE
            }
            
            # Get instance ID
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/region)
            
            # Process hook types
            if [ "$1" == "launching" ]; then
              log "Processing instance launching lifecycle hook for $INSTANCE_ID"
              
              # Run environment file creator script
              log "Updating environment variables on launch"
              /opt/financial-news-engine/deploy_scripts/create_env_file.sh
              
              # Complete the lifecycle action
              log "Completing lifecycle action"
              aws autoscaling complete-lifecycle-action \
                --lifecycle-hook-name UpdateEnvOnLaunch \
                --auto-scaling-group-name $(aws autoscaling describe-auto-scaling-instances --instance-ids $INSTANCE_ID --region $REGION --query "AutoScalingInstances[0].AutoScalingGroupName" --output text) \
                --lifecycle-action-result CONTINUE \
                --instance-id $INSTANCE_ID \
                --region $REGION
                
            elif [ "$1" == "terminating" ]; then
              log "Processing instance terminating lifecycle hook for $INSTANCE_ID"
              
              # Perform any cleanup actions here
              
              # Complete the lifecycle action
              log "Completing lifecycle action" 
              aws autoscaling complete-lifecycle-action \
                --lifecycle-hook-name UpdateEnvOnTerminate \
                --auto-scaling-group-name $(aws autoscaling describe-auto-scaling-instances --instance-ids $INSTANCE_ID --region $REGION --query "AutoScalingInstances[0].AutoScalingGroupName" --output text) \
                --lifecycle-action-result CONTINUE \
                --instance-id $INSTANCE_ID \
                --region $REGION
            else
              log "Unknown lifecycle hook type: $1"
              exit 1
            fi
            
            log "Lifecycle hook handler completed successfully"
            EOF
            
            chmod +x /opt/financial-news-engine/deploy_scripts/lifecycle_handler.sh
            
            # Create environment file update script
            log "Creating environment file update script - parameters are managed by the CICD stack"
            cat > /opt/financial-news-engine/deploy_scripts/create_env_file.sh << 'EOF'
            #!/bin/bash
            # Fetch environment variables from SSM Parameter Store
            echo "Fetching credentials from SSM Parameter Store - parameters are managed by the CICD stack"
            
            # Set default values in case parameter retrieval fails
            ES_URL=""
            ES_API_KEY=""
            ES_INDEX="financial_news"
            ES_SHARDS="3"
            ES_REPLICAS="2"
            ENV="production"
            
            # Get parameters from SSM Parameter Store with error handling and verbosity
            function get_parameter() {
                local param_name=$1
                local default_value=$2
                
                echo "Fetching parameter: $param_name"
                local value=$(aws ssm get-parameter --name "$param_name" --with-decryption --query "Parameter.Value" --output text 2>/dev/null)
                local exit_code=$?
                
                if [ $exit_code -eq 0 ] && [ ! -z "$value" ]; then
                    echo "Successfully retrieved parameter: $param_name"
                    echo "$value"
                else
                    echo "WARNING: Failed to retrieve parameter: $param_name - using default value: $default_value"
                    echo "$default_value"
                fi
            }
            
            # Get parameters with default fallbacks
            ES_URL=$(get_parameter "/financial-news/elasticsearch-url" "https://your-elasticsearch-endpoint.es.amazonaws.com")
            ES_API_KEY=$(get_parameter "/financial-news/elasticsearch-api-key" "default-api-key")
            ES_INDEX=$(get_parameter "/financial-news/elasticsearch-index" "financial_news")
            ES_SHARDS=$(get_parameter "/financial-news/es-number-of-shards" "3")
            ES_REPLICAS=$(get_parameter "/financial-news/es-number-of-replicas" "2")
            ENV=$(get_parameter "/financial-news/environment" "${EnvironmentName}")
            
            # Create the .env file
            cat > /opt/financial-news-engine/.env << EOL
            ELASTICSEARCH_URL=$ES_URL
            ELASTICSEARCH_API_KEY=$ES_API_KEY
            ELASTICSEARCH_INDEX=$ES_INDEX
            ES_NUMBER_OF_SHARDS=$ES_SHARDS
            ES_NUMBER_OF_REPLICAS=$ES_REPLICAS
            ENVIRONMENT=$ENV
            CORS_ALLOWED_ORIGINS=https://financialnewsengine.com,https://www.financialnewsengine.com,http://localhost:3000
            EOL
            
            # Set secure permissions
            chmod 600 /opt/financial-news-engine/.env
            echo "Created .env file with environment variables from SSM Parameter Store"
            
            # Output parameters retrieved (with API key redacted)
            echo "Environment loaded with the following parameters:"
            echo "ELASTICSEARCH_URL=$ES_URL"
            echo "ELASTICSEARCH_API_KEY=****REDACTED****"
            echo "ELASTICSEARCH_INDEX=$ES_INDEX"
            echo "ES_NUMBER_OF_SHARDS=$ES_SHARDS"
            echo "ES_NUMBER_OF_REPLICAS=$ES_REPLICAS"
            echo "ENVIRONMENT=$ENV"
            EOF
            
            # Make the script executable
            chmod +x /opt/financial-news-engine/deploy_scripts/create_env_file.sh
            
            # Run the script to create initial env file
            log "Creating initial environment file from SSM Parameters (managed by CICD stack)"
            # Retry 3 times with a backoff delay to allow for eventual consistency
            MAX_RETRIES=3
            for i in $(seq 1 $MAX_RETRIES); do
              log "Attempt $i of $MAX_RETRIES to create environment file"
              /opt/financial-news-engine/deploy_scripts/create_env_file.sh && break
              if [ $i -eq $MAX_RETRIES ]; then
                log "WARNING: All attempts to create environment file failed. Using default values."
              else
                log "Waiting 10 seconds before retrying..."
                sleep 10
              fi
            done
            
            # Set up daily cron job to update environment variables
            log "Setting up daily cron job to update environment variables"
            cat > /etc/cron.daily/update_env_file << 'EOF'
            #!/bin/bash
            /opt/financial-news-engine/deploy_scripts/create_env_file.sh
            if systemctl is-active --quiet financial-news.service; then
              systemctl restart financial-news.service
            fi
            EOF
            chmod +x /etc/cron.daily/update_env_file
            
            # Configure the instance
            log "Configuring the instance using cfn-init"
            /usr/local/bin/cfn-init -v \
              --stack ${AWS::StackName} \
              --resource BackendLaunchTemplate \
              --region ${AWS::Region}
            
            # Final status
            log "Initialization completed successfully"
            echo "COMPLETED" > $STATUS_FILE
            
            # Signal completion
            log "Signaling completion to CloudFormation"
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BackendAutoScalingGroup --region ${AWS::Region}

  # Backend Auto Scaling Group
  BackendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: HTTPSListener
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-backend-asg
      LaunchTemplate:
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: !GetAtt BackendLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnet1ID"
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnet2ID"
      TargetGroupARNs:
        - !Ref BackendTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-instance
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref EnvironmentName
          PropagateAtLaunch: true
      LifecycleHookSpecificationList:
        - DefaultResult: CONTINUE
          HeartbeatTimeout: 300
          LifecycleHookName: UpdateEnvOnLaunch
          LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
        - DefaultResult: CONTINUE
          HeartbeatTimeout: 180
          LifecycleHookName: UpdateEnvOnTerminate
          LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-backend-alb
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Subnets:
        - Fn::ImportValue: !Sub "${VpcStackName}-PublicSubnet1ID"
        - Fn::ImportValue: !Sub "${VpcStackName}-PublicSubnet2ID"
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-alb
        - Key: Environment
          Value: !Ref EnvironmentName

  # HTTPS Listener
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !If 
            - HasDomainName
            - !Ref SSLCertificate
            - !Ref SSLCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01

  # HTTP Listener (redirects to HTTPS)
  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: '443'
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: HTTP_301

  # Target Group for Backend Servers
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-backend-tg
      Port: 5000
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VPCID"
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-tg
        - Key: Environment
          Value: !Ref EnvironmentName

  # Auto Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref BackendAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 70.0

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if CPU too high for more than 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 85
      AlarmActions:
        - !Ref BackendSNSTopic
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref BackendAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold

  # SNS Topic for Alarms
  BackendSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${EnvironmentName}-backend-alerts
      TopicName: !Sub ${EnvironmentName}-backend-alerts

  # CORS handling is now implemented directly in the Flask application
  # This rule handles OPTIONS requests and returns a 200 status code
  # CORS headers must be added by the application code
  CorsPreflightRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 1
      Conditions:
        - Field: http-request-method
          HttpRequestMethodConfig:
            Values: [ 'OPTIONS' ]
      Actions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            StatusCode: '200'
            MessageBody: 'CORS Preflight'

  # Forward all non-OPTIONS requests to the target group
  # The actual CORS headers will be added by the backend application
  CorsHeadersRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HTTPSListener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values: [ '/*' ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  # Lambda IAM Role for Lambda@Edge
  CorsLambdaEdgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /service-role/
      
  # Lambda@Edge function to add CORS headers
  CorsLambdaEdgeFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          'use strict';
          exports.handler = (event, context, callback) => {
            // Get the request and response
            const request = event.Records[0].cf.request;
            const response = event.Records[0].cf.response;
            const headers = response.headers;
            
            // Extract the origin from the request headers
            const requestHeaders = request.headers;
            const origin = requestHeaders.origin && requestHeaders.origin[0] ? requestHeaders.origin[0].value : '*';
            
            // List of allowed origins from environment or default set
            // The actual origins should match those in CORS_ALLOWED_ORIGINS parameter
            const allowedOrigins = [
              'https://financialnewsengine.com',
              'https://www.financialnewsengine.com',
              'http://localhost:3000',
              'https://d3dw79zwd8sn9g.cloudfront.net'  // CloudFront domain
            ];
            
            // Determine if the origin should be allowed
            let corsOrigin = '*';
            if (origin !== '*') {
              // If specific origin, check if it's allowed
              if (allowedOrigins.includes(origin)) {
                corsOrigin = origin;
              } else {
                // For basic wildcard matching
                for (let allowedOrigin of allowedOrigins) {
                  if (allowedOrigin.includes('*')) {
                    const pattern = allowedOrigin.replace('*', '');
                    if (origin.startsWith(pattern.replace('*.', '')) || 
                        origin.endsWith(pattern.replace('*', ''))) {
                      corsOrigin = origin;
                      break;
                    }
                  }
                }
              }
            }
            
            // For debugging (this will be visible in CloudWatch Logs)
            console.log('Request URI:', request.uri);
            console.log('Request method:', request.method);
            console.log('Request origin:', origin);
            console.log('Allowed CORS origin:', corsOrigin);
            
            // Define CORS headers
            headers['access-control-allow-origin'] = [{ key: 'Access-Control-Allow-Origin', value: corsOrigin }];
            headers['access-control-allow-methods'] = [{ key: 'Access-Control-Allow-Methods', value: 'GET,HEAD,PUT,POST,DELETE,PATCH,OPTIONS' }];
            headers['access-control-allow-headers'] = [{ key: 'Access-Control-Allow-Headers', value: 'Content-Type,Authorization,X-Requested-With,X-Amz-Date,X-Api-Key,X-Amz-Security-Token' }];
            
            // Only set credentials if we have a specific origin
            if (corsOrigin !== '*') {
              headers['access-control-allow-credentials'] = [{ key: 'Access-Control-Allow-Credentials', value: 'true' }];
            }
            
            headers['access-control-max-age'] = [{ key: 'Access-Control-Max-Age', value: '86400' }];
            
            // For OPTIONS request, return directly with CORS headers
            if (request.method === 'OPTIONS') {
              response.status = '204';
              response.statusDescription = 'No Content';
              callback(null, response);
              return;
            }
            
            // For all other requests, add the CORS headers to the response
            callback(null, response);
          };
      Handler: index.handler
      Role: !GetAtt CorsLambdaEdgeRole.Arn
      Runtime: nodejs16.x
      Description: Lambda@Edge function to add CORS headers to API responses
      Timeout: 5
      MemorySize: 128

  # Version for Lambda@Edge function - required for CloudFront
  CorsLambdaEdgeVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref CorsLambdaEdgeFunction
      Description: !Sub "Version ${AWS::StackName}"

  # CloudFront distribution that sits in front of the ALB
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub "${EnvironmentName} CloudFront Distribution for Backend API"
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: BackendOrigin
            DomainName: !GetAtt ApplicationLoadBalancer.DNSName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
              OriginReadTimeout: 60
              OriginKeepaliveTimeout: 30
            OriginCustomHeaders:
              - HeaderName: X-Forwarded-Host
                HeaderValue: !If [HasDomainName, !Ref BackendDomainName, !GetAtt ApplicationLoadBalancer.DNSName]
        DefaultCacheBehavior:
          TargetOriginId: BackendOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: true
            Headers:
              - Origin
              - Access-Control-Request-Method
              - Access-Control-Request-Headers
              - Authorization
            Cookies:
              Forward: all
          LambdaFunctionAssociations:
            - EventType: origin-response
              LambdaFunctionARN: !Ref CorsLambdaEdgeVersion
            - EventType: viewer-response
              LambdaFunctionARN: !Ref CorsLambdaEdgeVersion
          Compress: true
        CacheBehaviors:
          - PathPattern: /health
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: BackendOrigin
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: true
              Headers:
                - Origin
              Cookies:
                Forward: none
            LambdaFunctionAssociations:
              - EventType: origin-response
                LambdaFunctionARN: !Ref CorsLambdaEdgeVersion
              - EventType: viewer-response
                LambdaFunctionARN: !Ref CorsLambdaEdgeVersion
            MinTTL: 0
            DefaultTTL: 30
            MaxTTL: 60
            Compress: true
        PriceClass: PriceClass_100
        Aliases: !If
          - HasDomainName
          - [!Ref BackendDomainName]
          - !Ref AWS::NoValue
        ViewerCertificate: !If
          - HasDomainName
          - AcmCertificateArn: !If [HasDomainName, !Ref SSLCertificate, !Ref SSLCertificateArn]
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2019
          - CloudFrontDefaultCertificate: true

  # Route 53 Record Set for CloudFront
  CloudFrontDNSRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateDNSRecord
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref BackendDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID (this is fixed)
        EvaluateTargetHealth: false

  # Configure lifecycle hooks
  ASGLifecycleLaunchingRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-asg-lifecycle-launching"
      Description: "Rule to process instance launching lifecycle hooks for backend ASG"
      EventPattern:
        source:
          - "aws.autoscaling"
        detail-type:
          - "EC2 Instance-launch Lifecycle Action"
        detail:
          AutoScalingGroupName:
            - !Ref BackendAutoScalingGroup
      State: ENABLED
      Targets:
        - Arn: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/AWS-RunShellScript"
          Id: "LifecycleLaunchingTarget"
          RoleArn: !GetAtt BackendInstanceRole.Arn
          RunCommandParameters:
            RunCommandTargets:
              - Key: InstanceIds
                Values:
                  - ${!detail.EC2InstanceId}
          Input: !Sub |
            {
              "commands": ["/opt/financial-news-engine/deploy_scripts/lifecycle_handler.sh launching"]
            }

  ASGLifecycleTerminatingRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${AWS::StackName}-asg-lifecycle-terminating"
      Description: "Rule to process instance terminating lifecycle hooks for backend ASG"
      EventPattern:
        source:
          - "aws.autoscaling"
        detail-type:
          - "EC2 Instance-terminate Lifecycle Action"
        detail:
          AutoScalingGroupName:
            - !Ref BackendAutoScalingGroup
      State: ENABLED
      Targets:
        - Arn: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/AWS-RunShellScript"
          Id: "LifecycleTerminatingTarget"
          RoleArn: !GetAtt BackendInstanceRole.Arn
          RunCommandParameters:
            RunCommandTargets:
              - Key: InstanceIds
                Values:
                  - ${!detail.EC2InstanceId}
          Input: !Sub |
            {
              "commands": ["/opt/financial-news-engine/deploy_scripts/lifecycle_handler.sh terminating"]
            }

Outputs:
  BackendALBDNSName:
    Description: DNS Name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-BackendALBDNSName"
  
  CloudFrontDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub "${AWS::StackName}-CloudFrontDomainName"
  
  APIEndpointURL:
    Description: API Endpoint URL (use this for the frontend configuration)
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-APIEndpointURL"
  
  BackendALBFullQualifiedDNSName:
    Description: Full DNS Name of the Application Load Balancer
    Value: !If
      - HasDomainName
      - !Sub https://${BackendDomainName}
      - !Sub https://${ApplicationLoadBalancer.DNSName}
    Export:
      Name: !Sub "${AWS::StackName}-BackendALBURL"
  
  BackendAutoScalingGroupName:
    Description: Auto Scaling Group Name
    Value: !Ref BackendAutoScalingGroup
    Export:
      Name: !Sub "${AWS::StackName}-BackendASGName"
  
  BackendSecurityGroupId:
    Description: Security Group ID for Backend Servers
    Value: !Ref BackendSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-BackendSGID"
  
  BackendSNSTopicArn:
    Description: ARN of the SNS Topic for Backend Alerts
    Value: !Ref BackendSNSTopic
    Export:
      Name: !Sub "${AWS::StackName}-BackendSNSTopicARN"
  
  ElasticsearchSettings:
    Description: "Elasticsearch configuration used"
    Value: !Sub "URL: ${ElasticsearchEndpoint}, Index: ${ElasticsearchIndex}"
    Export:
      Name: !Sub "${AWS::StackName}-ElasticsearchSettings"
  
  SSLCertificateArn:
    Description: ARN of the SSL certificate
    Value: !If
      - HasDomainName
      - !Ref SSLCertificate
      - !Ref SSLCertificateArn
    Export:
      Name: !Sub "${AWS::StackName}-SSLCertificateArn" 