AWSTemplateFormatVersion: '2010-09-09'
Description: 'Backend Infrastructure for Financial News Engine'

Parameters:
  EnvironmentName:
    Description: Environment name
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
  
  ResourceNameSuffix:
    Description: A suffix to append to resource names to avoid naming conflicts
    Type: String
    Default: v1
  
  VpcStackName:
    Description: Name of the VPC CloudFormation stack
    Type: String
    Default: financial-news-vpc
  
  InstanceType:
    Description: EC2 instance type for the backend servers
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
  
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  
  AMIId:
    Description: AMI ID for the EC2 instances
    Type: AWS::EC2::Image::Id
    Default: ami-0261755bbcb8c4a84  # Amazon Linux 2 in us-east-1 (update for your region)
  
  ElasticsearchEndpoint:
    Description: Endpoint URL for Elasticsearch
    Type: String
    Default: https://your-elasticsearch-endpoint.es.amazonaws.com
  
  ElasticsearchIndex:
    Description: Elasticsearch index name
    Type: String
    Default: financial_news
  
  ApifyApiKey:
    Description: API key for Apify Reddit scraper
    Type: String
    NoEcho: true

  UpdateIntervalHours:
    Description: How often to update the database (in hours)
    Type: Number
    Default: 4
    MinValue: 1
    MaxValue: 24
  
  InitialUpdate:
    Description: Whether to run an initial update when the service starts
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  
  MinSize:
    Description: Minimum number of EC2 instances in the Auto Scaling Group
    Type: Number
    Default: 2
    MinValue: 1
  
  MaxSize:
    Description: Maximum number of EC2 instances in the Auto Scaling Group
    Type: Number
    Default: 6
    MinValue: 1
  
  DesiredCapacity:
    Description: Desired number of EC2 instances in the Auto Scaling Group
    Type: Number
    Default: 2
    MinValue: 1
  
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0261755bbcb8c4a84  # Amazon Linux 2
    us-east-2:
      AMI: ami-0430580de6244e02e  # Amazon Linux 2
    us-west-1:
      AMI: ami-04669a22aad391419  # Amazon Linux 2
    us-west-2:
      AMI: ami-0efa651876de2a5ce  # Amazon Linux 2
    eu-west-1:
      AMI: ami-0a8e758f5e873d1c1  # Amazon Linux 2

Resources:
  # IAM Role for EC2 instances
  BackendInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-backend-role-${ResourceNameSuffix}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Path: /
      Policies:
        - PolicyName: ESAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'es:ESHttp*'
                  - 'es:ESHttpGet'
                  - 'es:ESHttpPut'
                  - 'es:ESHttpPost'
                  - 'es:ESHttpDelete'
                Resource: '*'
  
  # IAM Role for Lambda scraper function
  ScraperLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-scraper-role-${ResourceNameSuffix}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: /
      Policies:
        - PolicyName: ESScraperAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'es:ESHttp*'
                  - 'es:ESHttpGet'
                  - 'es:ESHttpPut'
                  - 'es:ESHttpPost'
                  - 'es:ESHttpDelete'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'
  
  # EC2 Instance Profile
  BackendInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref BackendInstanceRole
  
  # Security Group for Backend Servers
  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-backend-sg-${ResourceNameSuffix}
      GroupDescription: Security group for backend servers
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-sg-${ResourceNameSuffix}
  
  # Security Group for ELB
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-lb-sg-${ResourceNameSuffix}
      GroupDescription: Security group for load balancer
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-lb-sg-${ResourceNameSuffix}
  
  # Security group for Lambda functions
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-lambda-sg-${ResourceNameSuffix}
      GroupDescription: Security group for Lambda functions
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VPCID"
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-lambda-sg-${ResourceNameSuffix}
  
  # Lambda Function for Reddit scraper
  ScraperLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaCodeBucket
    Properties:
      FunctionName: !Sub ${EnvironmentName}-financial-news-scraper-${ResourceNameSuffix}
      Description: Lambda function to scrape Reddit and other news sources for financial news
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt ScraperLambdaRole.Arn
      Code:
        ZipFile: |
          def handler(event, context):
              print('Initial deployment placeholder Lambda')
              return {
                  'statusCode': 200,
                  'body': 'Initial deployment completed. Replace with actual code via CI/CD.'
              }
      Timeout: 300
      MemorySize: 512
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt LambdaSecurityGroup.GroupId
        SubnetIds:
          - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnet1ID"
          - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnet2ID"
      Environment:
        Variables:
          ELASTICSEARCH_URL: !Ref ElasticsearchEndpoint
          ELASTICSEARCH_INDEX: !Ref ElasticsearchIndex
          EMBEDDING_DIMENSIONS: '768'
          UPDATE_INTERVAL_HOURS: !Ref UpdateIntervalHours
          INITIAL_UPDATE: !Ref InitialUpdate
          USE_MOCK_DATA: 'false'
          APIFY_API_KEY: !Ref ApifyApiKey
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-financial-news-scraper-${ResourceNameSuffix}
  
  # Lambda Code Bucket
  LambdaCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::AccountId}-${EnvironmentName}-lambda-code-${ResourceNameSuffix}
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-lambda-code-bucket-${ResourceNameSuffix}
  
  # CloudWatch Event Rule to trigger the scraper
  ScraperScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub ${EnvironmentName}-scraper-schedule-${ResourceNameSuffix}
      ScheduleExpression: !Sub rate(${UpdateIntervalHours} hours)
      State: ENABLED
      Targets:
        - Id: ScraperTarget
          Arn: !GetAtt ScraperLambdaFunction.Arn
  
  # Permission for EventBridge to invoke Lambda
  ScraperSchedulePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ScraperLambdaFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScraperScheduleRule.Arn
  
  # Launch Template for backend servers
  BackendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: [BackendSecurityGroup, BackendInstanceProfile]
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-backend-lt-${ResourceNameSuffix}
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: !Ref AMIId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref BackendSecurityGroup
        IamInstanceProfile:
          Name: !Ref BackendInstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            
            # Update system
            yum update -y
            
            # Install dependencies
            yum install -y python3 python3-pip git
            
            # Install CloudWatch agent
            yum install -y amazon-cloudwatch-agent
            
            # Clone repository
            REPO_DIR=/opt/financial-news
            mkdir -p $REPO_DIR
            cd $REPO_DIR
            git clone https://github.com/yourusername/financial-news-engine.git .
            
            # Set up Python environment
            pip3 install -r backend/requirements.txt
            
            # Add environment variables
            cat > /etc/environment << EOL
            ELASTICSEARCH_URL=${ElasticsearchEndpoint}
            ELASTICSEARCH_INDEX=${ElasticsearchIndex}
            EMBEDDING_DIMENSIONS=768
            UPDATE_INTERVAL_HOURS=${UpdateIntervalHours}
            INITIAL_UPDATE=${InitialUpdate}
            USE_MOCK_DATA=false
            APIFY_API_KEY=${ApifyApiKey}
            EOL
            
            # Set up application
            mkdir -p /opt/financial-news/logs
            cd /opt/financial-news
            
            # Create systemd service for backend
            cat > /etc/systemd/system/financial-news-backend.service << EOL
            [Unit]
            Description=Financial News Backend Service
            After=network.target
            
            [Service]
            User=ec2-user
            WorkingDirectory=/opt/financial-news/backend
            ExecStart=/usr/bin/python3 backend.py
            Restart=always
            RestartSec=10
            StandardOutput=syslog
            StandardError=syslog
            SyslogIdentifier=financial-news-backend
            Environment=PYTHONPATH=/opt/financial-news
            EnvironmentFile=/etc/environment
            
            [Install]
            WantedBy=multi-user.target
            EOL
            
            # Start CloudWatch agent with default config
            systemctl enable amazon-cloudwatch-agent
            systemctl start amazon-cloudwatch-agent
            
            # Start application
            systemctl enable financial-news-backend
            systemctl start financial-news-backend
        
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 20
              VolumeType: gp3
              DeleteOnTermination: true
        
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 1
        
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-backend-server-${ResourceNameSuffix}
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-backend-volume-${ResourceNameSuffix}
  
  # Auto Scaling Group
  BackendAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-backend-asg-${ResourceNameSuffix}
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnet1ID"
        - Fn::ImportValue: !Sub "${VpcStackName}-PrivateSubnet2ID"
      LaunchTemplate:
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: !GetAtt BackendLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      TargetGroupARNs:
        - !Ref BackendTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-instance-${ResourceNameSuffix}
          PropagateAtLaunch: true
  
  # Load Balancer
  BackendLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: [LoadBalancerSecurityGroup]
    Properties:
      Name: !Sub ${EnvironmentName}-backend-lb-${ResourceNameSuffix}
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub "${VpcStackName}-PublicSubnet1ID"
        - Fn::ImportValue: !Sub "${VpcStackName}-PublicSubnet2ID"
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-lb-${ResourceNameSuffix}
  
  # Target Group
  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-backend-tg-${ResourceNameSuffix}
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub "${VpcStackName}-VPCID"
      HealthCheckPath: /query
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-tg-${ResourceNameSuffix}
  
  # Listener
  BackendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      LoadBalancerArn: !Ref BackendLoadBalancer
      Port: 80
      Protocol: HTTP
  
  # Auto Scaling Policy
  BackendScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref BackendAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 70.0
  
  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm if CPU too high or metric disappears
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 3
      Threshold: 90
      AlarmActions:
        - !Ref AlarmTopic
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref BackendAutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
  
  # SNS Topic for Alarms
  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${EnvironmentName}-backend-alarms-${ResourceNameSuffix}
      TopicName: !Sub ${EnvironmentName}-backend-alarms-${ResourceNameSuffix}

Outputs:
  BackendURL:
    Description: URL of the backend service
    Value: !Sub http://${BackendLoadBalancer.DNSName}
    Export:
      Name: !Sub ${AWS::StackName}-BackendURL
  
  ApiGatewayUrl:
    Description: URL of the backend service (for compatibility)
    Value: !Sub ${BackendLoadBalancer.DNSName}
    Export:
      Name: !Sub ${AWS::StackName}-ApiGatewayUrl
  
  ScraperLambdaFunction:
    Description: ARN of the scraper Lambda function
    Value: !GetAtt ScraperLambdaFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-ScraperLambdaFunction
  
  LambdaCodeBucket:
    Description: S3 bucket for Lambda code storage
    Value: !Ref LambdaCodeBucket
    Export:
      Name: !Sub ${AWS::StackName}-LambdaCodeBucket
  
  LambdaSecurityGroup:
    Description: Security Group for Lambda functions
    Value: !Ref LambdaSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-AppLambdaSG 