AWSTemplateFormatVersion: '2010-09-09'
Description: 'Financial News Engine - Automated Deployment Verification Resources'

Parameters:
  EnvironmentName:
    Description: Environment name
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
  
  BackendStackName:
    Description: Name of the backend CloudFormation stack
    Type: String
    Default: financial-news-backend
  
  ScheduleExpression:
    Description: Schedule expression for the verification check
    Type: String
    Default: rate(1 hour)
    Description: How often to run the verification check (e.g., rate(1 hour) or cron(0 * * * ? *))
  
  ApplicationVersion:
    Description: Current application version
    Type: String
    Default: 1.0.0

Resources:
  # IAM Role for the Lambda verification function
  VerificationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: EC2AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:DescribeTags'
                Resource: '*'
        - PolicyName: SSMAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ssm:SendCommand'
                  - 'ssm:ListCommandInvocations'
                  - 'ssm:DescribeInstanceInformation'
                Resource: '*'
        - PolicyName: AutoScalingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'autoscaling:DescribeAutoScalingGroups'
                  - 'autoscaling:DescribeAutoScalingInstances'
                Resource: '*'
        - PolicyName: CloudFormationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:DescribeStacks'
                Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${BackendStackName}/*'

  # Lambda function to verify deployments
  VerificationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${EnvironmentName}-financial-news-verify"
      Handler: index.lambda_handler
      Role: !GetAtt VerificationLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          import logging
          import time
          
          # Set up logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          # Configure AWS clients
          ec2 = boto3.client('ec2')
          ssm = boto3.client('ssm')
          cloudformation = boto3.client('cloudformation')
          
          # Environment variables
          ENV = os.environ.get('ENVIRONMENT', 'production')
          BACKEND_STACK_NAME = os.environ.get('BACKEND_STACK_NAME')
          APP_VERSION = os.environ.get('APP_VERSION', '1.0.0')
          
          def lambda_handler(event, context):
              """
              Lambda function to check all EC2 instances in the financial-news ASG
              and run verification script on each one
              """
              logger.info(f"Starting verification of Financial News Engine instances (version {APP_VERSION})")
              
              try:
                  # Get Auto Scaling Group name from CloudFormation outputs
                  asg_name = None
                  if BACKEND_STACK_NAME:
                      response = cloudformation.describe_stacks(StackName=BACKEND_STACK_NAME)
                      for output in response['Stacks'][0]['Outputs']:
                          if output['OutputKey'] == 'BackendAutoScalingGroupName':
                              asg_name = output['OutputValue']
                              break
                  
                  # Find all instances with the financial-news tag or in the ASG
                  filters = [
                      {
                          'Name': 'instance-state-name',
                          'Values': ['running']
                      }
                  ]
                  
                  if asg_name:
                      # Get instances from the ASG
                      autoscaling = boto3.client('autoscaling')
                      asg_response = autoscaling.describe_auto_scaling_groups(
                          AutoScalingGroupNames=[asg_name]
                      )
                      
                      if asg_response['AutoScalingGroups']:
                          instance_ids = [i['InstanceId'] for i in asg_response['AutoScalingGroups'][0]['Instances']]
                      else:
                          # Fallback to tag-based search
                          filters.append({
                              'Name': 'tag:Application',
                              'Values': ['financial-news-engine']
                          })
                          response = ec2.describe_instances(Filters=filters)
                          instance_ids = []
                          for reservation in response['Reservations']:
                              for instance in reservation['Instances']:
                                  instance_ids.append(instance['InstanceId'])
                  else:
                      # Use tag-based search
                      filters.append({
                          'Name': 'tag:Application',
                          'Values': ['financial-news-engine']
                      })
                      response = ec2.describe_instances(Filters=filters)
                      instance_ids = []
                      for reservation in response['Reservations']:
                          for instance in reservation['Instances']:
                              instance_ids.append(instance['InstanceId'])
                  
                  if not instance_ids:
                      logger.info("No Financial News Engine instances found")
                      return {
                          'statusCode': 200,
                          'body': json.dumps('No instances found to verify')
                      }
                  
                  logger.info(f"Found {len(instance_ids)} instances to verify: {', '.join(instance_ids)}")
                  
                  # Run the verification script on each instance using SSM Run Command
                  ssm_response = ssm.send_command(
                      InstanceIds=instance_ids,
                      DocumentName='AWS-RunShellScript',
                      Parameters={
                          'commands': [
                              'cd /opt/financial-news-engine',
                              f'APP_VERSION={APP_VERSION} bash ./deploy_scripts/verify_deployment.sh'
                          ]
                      },
                      Comment=f'Running Financial News Engine verification script for version {APP_VERSION}'
                  )
                  
                  command_id = ssm_response['Command']['CommandId']
                  logger.info(f"Started SSM Command {command_id}")
                  
                  # Wait a bit for the command to start execution
                  time.sleep(5)
                  
                  # Check command status
                  status_response = ssm.list_command_invocations(
                      CommandId=command_id,
                      Details=True
                  )
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps(f"Verification started on {len(instance_ids)} instances with command ID {command_id}")
                  }
              
              except Exception as e:
                  logger.error(f"Error during verification: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f"Error: {str(e)}")
                  }
      Runtime: python3.9
      Timeout: 300
      MemorySize: 128
      Environment:
        Variables:
          ENVIRONMENT: !Ref EnvironmentName
          BACKEND_STACK_NAME: !Ref BackendStackName
          APP_VERSION: !Ref ApplicationVersion

  # EventBridge rule to trigger the verification Lambda on a schedule
  VerificationScheduleRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "${EnvironmentName}-financial-news-verify-schedule"
      Description: "Schedule to run verification of Financial News Engine instances"
      ScheduleExpression: !Ref ScheduleExpression
      State: ENABLED
      Targets:
        - Arn: !GetAtt VerificationLambdaFunction.Arn
          Id: "VerificationLambdaTarget"

  # Permission for EventBridge to invoke the Lambda function
  VerificationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref VerificationLambdaFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt VerificationScheduleRule.Arn

Outputs:
  VerificationLambdaFunction:
    Description: "Lambda function that verifies Financial News Engine deployments"
    Value: !Ref VerificationLambdaFunction
  
  VerificationScheduleRule:
    Description: "EventBridge rule that triggers verification on a schedule"
    Value: !Ref VerificationScheduleRule 