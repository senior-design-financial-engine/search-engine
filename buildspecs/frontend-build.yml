version: 0.2
phases:
  install:
    runtime-versions:
      nodejs: 16
    commands:
      - echo "Installing frontend dependencies..."
      - pwd
      - ls -la
      - echo "Checking directory structure"
      - if [ -d "frontend" ]; then cd frontend; elif [ -d "../frontend" ]; then cd ../frontend; fi
      - npm install
  
  pre_build:
    commands:
      - echo "Running tests..."
      - npm test -- --watchAll=false --testEnvironment=jsdom || echo "Some tests failed, but continuing with build..."
      - echo "Getting Elasticsearch configuration from SSM Parameter Store..."
      - |
        # Get Elasticsearch parameters from SSM (exported from backend stack)
        echo "Retrieving Elasticsearch configuration from SSM Parameter Store..."
        
        # Get backend stack name from environment variable or use default
        BACKEND_STACK_NAME=${BACKEND_STACK_NAME:-financial-news-backend}
        echo "Using backend stack name: $BACKEND_STACK_NAME"
        
        # Retrieve Elasticsearch endpoint
        ES_URL=$(aws ssm get-parameter --name "/financial-news/elasticsearch/endpoint" --query "Parameter.Value" --output text || echo "")
        
        # If empty, try alternative parameter name pattern
        if [ -z "$ES_URL" ]; then
          ES_URL=$(aws ssm get-parameter --name "/financial-news/elasticsearch-url" --query "Parameter.Value" --output text || echo "")
        fi
        
        # Retrieve Elasticsearch API key (with decryption)
        ES_API_KEY=$(aws ssm get-parameter --name "/financial-news/elasticsearch/api_key" --with-decryption --query "Parameter.Value" --output text || echo "")
        
        # If empty, try alternative parameter name pattern
        if [ -z "$ES_API_KEY" ]; then
          ES_API_KEY=$(aws ssm get-parameter --name "/financial-news/elasticsearch-api-key" --with-decryption --query "Parameter.Value" --output text || echo "")
        fi
        
        # Retrieve Elasticsearch index name
        ES_INDEX=$(aws ssm get-parameter --name "/financial-news/elasticsearch/index" --query "Parameter.Value" --output text || echo "")
        
        # If empty, try alternative parameter name pattern
        if [ -z "$ES_INDEX" ]; then
          ES_INDEX=$(aws ssm get-parameter --name "/financial-news/elasticsearch-index" --query "Parameter.Value" --output text || echo "financial_news")
        fi
        
        # Output the retrieved values (masking the API key)
        echo "ELASTICSEARCH_URL=$ES_URL"
        echo "ELASTICSEARCH_API_KEY=****REDACTED****"
        echo "ELASTICSEARCH_INDEX=$ES_INDEX"
        
        # Create .env.production with the Elasticsearch values
        cat > .env.production << EOL
        # Primary API endpoint
        REACT_APP_API_URL=${REACT_APP_API_URL:-https://api.financialnewsengine.com}
        
        # Fallback direct API endpoint (bypassing CloudFront)
        REACT_APP_API_FALLBACK_URL=${REACT_APP_API_FALLBACK_URL:-https://direct-api.financialnewsengine.com}
        
        # Elasticsearch direct connection (from SSM Parameter Store)
        REACT_APP_ELASTICSEARCH_URL=$ES_URL
        REACT_APP_ELASTICSEARCH_API_KEY=$ES_API_KEY
        REACT_APP_ELASTICSEARCH_INDEX=$ES_INDEX
        
        # Production settings
        REACT_APP_ENV=production
        GENERATE_SOURCEMAP=false
        REACT_APP_DISABLE_DEVTOOLS=true
        EOL
        
        echo "Created .env.production with Elasticsearch configuration from SSM parameters"
  
  build:
    commands:
      - echo "Building the frontend..."
      - npm run build
      - echo "Build completed on $(date)"
  
  post_build:
    commands:
      - echo "Post-build phase completed successfully"
      - echo "Setting up artifact structure"
      - cd ..  # Return to root directory
      - mkdir -p artifact_output
      - mkdir -p artifact_output/frontend  # Create the frontend directory inside artifact_output
      - echo "Copying frontend build files"
      - cp -r frontend/build/* artifact_output/frontend/
      - echo "Copying buildspecs directory"
      - cp -r buildspecs artifact_output/
      - echo "Copying root-level buildspec files"
      - cp *.yml artifact_output/ || true
      - echo "Copying deployment scripts"
      - mkdir -p artifact_output/scripts
      - cp -r deployment-scripts/* artifact_output/scripts/ || true
      - echo "Contents of the artifact_output directory:"
      - ls -la artifact_output
      - find artifact_output -type f | sort

artifacts:
  base-directory: artifact_output
  files:
    - '**/*'

cache:
  paths:
    - 'frontend/node_modules/**/*' 