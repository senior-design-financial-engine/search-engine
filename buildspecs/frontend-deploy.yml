version: 0.2

phases:
  install:
    runtime-versions:
      nodejs: 16
    commands:
      - "echo \"Running frontend deployment from buildspecs...\""
      - "echo \"Debugging workspace contents\""
      - "ls -la"
      - "echo \"Checking frontend directory\""
      - "ls -la frontend || echo \"No frontend directory found\""
  
  pre_build:
    commands:
      - echo "Preparing for deployment..."
      - find . -name "build" -type d | sort
      - find . -name "package.json" -type f | sort
      - |
        cat > detect_build.sh << 'EOF'
        #!/bin/bash
        if [ -f "index.html" ] && [ -d "static" ]; then
          echo "."
        elif [ -d "build" ]; then
          echo "build"
        elif [ -d "frontend/build" ]; then
          echo "frontend/build"
        elif [ -d "frontend" ] && [ -f "frontend/index.html" ] && [ -d "frontend/static" ]; then
          echo "frontend"
        elif [ -d "frontend" ]; then
          cd frontend
          npm install
          npm run build
          cd ..
          mkdir -p build
          cp -r frontend/build/* build/
          echo "build"
        else
          echo ""
        fi
        EOF
      - chmod +x detect_build.sh
      - BUILD_DIR=$(./detect_build.sh)
      - if [ -z "$BUILD_DIR" ]; then echo "No frontend directory or build artifacts found"; exit 1; fi
      - echo "Using build directory $BUILD_DIR"
      - echo "Loading Elasticsearch configuration from SSM Parameter Store..."
      - |
        # Make ci_utils.sh executable and source it to load functions
        if [ -f "deployment-scripts/ci_utils.sh" ]; then
          chmod +x deployment-scripts/ci_utils.sh
          source deployment-scripts/ci_utils.sh
          get_es_parameters "${ENVIRONMENT_NAME:-dev}"
        elif [ -f "scripts/ci_utils.sh" ]; then
          chmod +x scripts/ci_utils.sh
          source scripts/ci_utils.sh
          get_es_parameters "${ENVIRONMENT_NAME:-dev}"
        else
          echo "Warning: CI utilities script not found, will use environment variables if available"
        fi
  
  build:
    commands:
      - echo "Preparing deployment artifacts..."
      - echo "Listing contents of current directory"
      - ls -la
      - echo "Using build directory $BUILD_DIR"
      - echo "Injecting runtime configuration..."
      - |
        # Determine which script to use
        if [ -f "deployment-scripts/inject_config.sh" ]; then
          INJECT_SCRIPT="deployment-scripts/inject_config.sh"
        elif [ -f "scripts/inject_config.sh" ]; then
          INJECT_SCRIPT="scripts/inject_config.sh"
        else
          echo "Warning: Configuration injection script not found, using default values"
          exit 1
        fi
        
        # Make script executable
        chmod +x "$INJECT_SCRIPT"
        
        # Run script with appropriate parameters
        "$INJECT_SCRIPT" "$BUILD_DIR" "$ES_ENDPOINT" "$ES_API_KEY" "$ES_INDEX"
  
  post_build:
    commands:
      - echo "Retrieving S3 bucket name from CloudFormation stack"
      - BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name $FRONTEND_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='FrontendBucketName'].OutputValue" --output text)
      - if [ -z "$BUCKET_NAME" ]; then echo "Could not retrieve bucket name from CloudFormation stack"; exit 1; fi
      - echo "Retrieved bucket name $BUCKET_NAME"
      - echo "Syncing build files to S3 bucket"
      - aws s3 sync $BUILD_DIR/ s3://$BUCKET_NAME/ --delete
      - echo "Creating CloudFront invalidation"
      - CLOUDFRONT_ID=$(aws cloudformation describe-stacks --stack-name $FRONTEND_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" --output text)
      - if [ -n "$CLOUDFRONT_ID" ]; then aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_ID --paths "/*"; else echo "Could not retrieve CloudFront distribution ID"; fi
      - echo "Frontend deployment completed successfully!"

artifacts:
  files:
    - '**/*'
  base-directory: "$BUILD_DIR"
  discard-paths: no

cache:
  paths:
    - 'node_modules/**/*' 