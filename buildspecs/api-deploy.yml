version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - "echo \"Installing required tools\""
      - "pip install pyyaml boto3 awscli jq"
  
  pre_build:
    commands:
      - "echo \"Preparing API code for deployment\""
      - "cd backend || (echo \"Backend directory not found, using project root\"; cd .)"
      - "mkdir -p api/deploy"
      - "cp backend.py api/deploy/app.py || echo \"Using fallback app.py\""
      - "cp requirements.txt api/deploy/requirements.txt || echo \"Using fallback requirements.txt\""
      
      # Get assets bucket name from CloudFormation
      - "echo \"Getting assets bucket name from CloudFormation\""
      - "export ASSETS_BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name $BACKEND_STACK_NAME --query \"Stacks[0].Outputs[?OutputKey=='AssetsBucketName'].OutputValue\" --output text)"
      - "echo \"Assets bucket name: $ASSETS_BUCKET_NAME\""
      
      # Create scripts directory if it doesn't exist
      - "mkdir -p scripts"
      - "mkdir -p buildspecs/api-deploy/scripts"
      
      # Copy deployment scripts
      - "echo \"Copying deployment scripts\""
      - "cp buildspecs/api-deploy/scripts/extract_app.py scripts/ || echo \"extract_app.py not found, creating empty file\""
      - "if [ ! -f \"scripts/extract_app.py\" ]; then echo '#!/usr/bin/env python3' > scripts/extract_app.py; echo 'print(\"Extraction script placeholder\")' >> scripts/extract_app.py; fi"
      - "cp buildspecs/api-deploy/scripts/deploy.sh api/deploy/ || echo \"deploy.sh not found, creating empty file\""
      - "if [ ! -f \"api/deploy/deploy.sh\" ]; then echo '#!/bin/bash' > api/deploy/deploy.sh; echo 'echo \"Deployment script placeholder\"' >> api/deploy/deploy.sh; fi"
      - "cp buildspecs/api-deploy/scripts/verify.sh api/deploy/ || echo \"verify.sh not found, creating empty file\""
      - "if [ ! -f \"api/deploy/verify.sh\" ]; then echo '#!/bin/bash' > api/deploy/verify.sh; echo 'echo \"Verification script placeholder\"' >> api/deploy/verify.sh; fi"
      - "cp buildspecs/api-deploy/scripts/financial-news.service api/deploy/ || echo \"financial-news.service not found, creating empty file\""
      - "if [ ! -f \"api/deploy/financial-news.service\" ]; then echo '[Unit]' > api/deploy/financial-news.service; echo 'Description=Financial News API Service' >> api/deploy/financial-news.service; fi"
      
      # Make scripts executable
      - "chmod +x scripts/extract_app.py"
      - "chmod +x api/deploy/deploy.sh"
      - "chmod +x api/deploy/verify.sh"
      
      # Execute app extraction if needed
      - "if [ ! -f \"api/deploy/app.py\" ]; then python3 scripts/extract_app.py; fi"
  
  build:
    commands:
      - "echo \"Getting backend instances from Auto Scaling Group\""
      - "ASG_NAME=$(aws cloudformation describe-stacks --stack-name $BACKEND_STACK_NAME --query \"Stacks[0].Outputs[?OutputKey=='BackendAutoScalingGroupName'].OutputValue\" --output text)"
      - "echo \"Auto Scaling Group $ASG_NAME\""
      - "INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG_NAME --query \"AutoScalingGroups[0].Instances[?LifecycleState=='InService'].InstanceId\" --output text)"
      - "echo \"Instance IDs $INSTANCE_IDS\""
      - "if [ -z \"$INSTANCE_IDS\" ]; then echo \"No running instances found in Auto Scaling Group\"; exit 0; fi"
      
      # Check for SSM permissions
      - "echo \"Checking for SSM permissions\""
      - |
        SSM_TEST=$(aws ssm describe-instance-information --output json 2>&1 || echo "SSM_PERMISSION_ERROR")
        if [[ $SSM_TEST == *"SSM_PERMISSION_ERROR"* ]]; then
          echo "WARNING: CodeBuild role lacks SSM permissions. Skipping direct instance deployment."
          echo "Please add ssm:SendCommand and ssm:DescribeInstanceInformation permissions to the CodeBuild role."
          echo "Files will still be uploaded to S3 for later deployment."
          SKIP_SSM_DEPLOY=true
        else
          SKIP_SSM_DEPLOY=false
        fi
      
      # Upload files to S3 for transfer
      - "echo \"Uploading deployment files to S3\""
      - "aws s3 cp api/deploy/app.py s3://$ASSETS_BUCKET_NAME/temp/app.py"
      - "aws s3 cp api/deploy/requirements.txt s3://$ASSETS_BUCKET_NAME/temp/requirements.txt"
      - "aws s3 cp api/deploy/financial-news.service s3://$ASSETS_BUCKET_NAME/temp/financial-news.service"
      - "aws s3 cp api/deploy/deploy.sh s3://$ASSETS_BUCKET_NAME/temp/deploy.sh"
      - "aws s3 cp api/deploy/verify.sh s3://$ASSETS_BUCKET_NAME/temp/verify.sh"
      
      # Deploy to each instance
      - "echo \"Deploying to instances\""
      - |
        if [ "$SKIP_SSM_DEPLOY" = "false" ]; then
          for INSTANCE_ID in $INSTANCE_IDS; do 
            echo "Deploying to instance $INSTANCE_ID"
            aws ssm send-command --document-name "AWS-RunShellScript" --targets "Key=InstanceIds,Values=$INSTANCE_ID" --parameters "commands=['mkdir -p /tmp/api-deploy']" --comment "Create staging directory" --output text || echo "Failed to create staging directory on $INSTANCE_ID"
            if [ $? -eq 0 ]; then
              DEPLOY_CMD="cd /tmp/api-deploy && aws s3 cp s3://$ASSETS_BUCKET_NAME/temp/app.py . && aws s3 cp s3://$ASSETS_BUCKET_NAME/temp/requirements.txt . && aws s3 cp s3://$ASSETS_BUCKET_NAME/temp/financial-news.service . && aws s3 cp s3://$ASSETS_BUCKET_NAME/temp/deploy.sh . && aws s3 cp s3://$ASSETS_BUCKET_NAME/temp/verify.sh . && chmod +x deploy.sh verify.sh && ./deploy.sh && ./verify.sh"
              aws ssm send-command --document-name "AWS-RunShellScript" --targets "Key=InstanceIds,Values=$INSTANCE_ID" --parameters "commands=[\"$DEPLOY_CMD\"]" --comment "Deploy and verify API" --output text || echo "Failed to deploy to $INSTANCE_ID"
              echo "Deployment to instance $INSTANCE_ID completed"
            fi
          done
        else
          echo "Skipping direct instance deployment due to missing SSM permissions"
        fi
  
  post_build:
    commands:
      - "echo \"Creating API configuration YAML\""
      - "echo \"---\" > backend-api.yaml"
      - "echo \"# Financial News Engine API Configuration\" >> backend-api.yaml"
      - "echo \"app_code: |\" >> backend-api.yaml"
      - "sed 's/^/  /' api/deploy/app.py >> backend-api.yaml"
      - "echo \"\" >> backend-api.yaml"
      - "echo \"requirements: |\" >> backend-api.yaml"
      - "sed 's/^/  /' api/deploy/requirements.txt >> backend-api.yaml"
      - "echo \"\" >> backend-api.yaml"
      - "echo \"service_definition: |\" >> backend-api.yaml"
      - "sed 's/^/  /' api/deploy/financial-news.service >> backend-api.yaml"
      - "echo \"\" >> backend-api.yaml"
      - "echo \"verification_script: |\" >> backend-api.yaml"
      - "sed 's/^/  /' api/deploy/verify.sh >> backend-api.yaml"
      
      - "echo \"Uploading API code to S3\""
      - "aws s3 cp backend-api.yaml s3://$ASSETS_BUCKET_NAME/api/backend-api.yaml"
      
      - "echo \"Starting ASG instance refresh\""
      - "ASG_NAME=$(aws cloudformation describe-stacks --stack-name $BACKEND_STACK_NAME --query \"Stacks[0].Outputs[?OutputKey=='BackendAutoScalingGroupName'].OutputValue\" --output text)"
      - |
        if [ -n "$ASG_NAME" ]; then 
          echo "Found ASG $ASG_NAME"
          # Check if instance refresh is already in progress
          REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME --query "InstanceRefreshes[?Status=='InProgress']" --output json)
          if [[ $REFRESH_STATUS == *"[]"* ]]; then
            REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME --preferences '{"MinHealthyPercentage": 50, "InstanceWarmup": 300}' --query "InstanceRefreshId" --output text)
            if [ -n "$REFRESH_ID" ]; then 
              echo "Started instance refresh with ID $REFRESH_ID"
            else 
              echo "WARNING: Could not start instance refresh"
            fi
          else
            echo "WARNING: Instance refresh already in progress, skipping new refresh"
          fi
        else 
          echo "WARNING: Could not find Auto Scaling Group name"
        fi
      
      - "echo \"API deployment completed\""

artifacts:
  files:
    - "api/deploy/**/*"
    - "scripts/**/*" 