version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo "Installing required tools"
      - pip install pyyaml boto3 awscli jq
  
  pre_build:
    commands:
      - echo "Preparing API code for deployment"
      - cd backend || (echo "Backend directory not found, using project root"; cd .)
      - mkdir -p api/deploy
      - cp backend.py api/deploy/app.py || echo "Using fallback app.py"
      - cp requirements.txt api/deploy/requirements.txt || echo "Using fallback requirements.txt"
      
      # If app.py wasn't found, try to extract from backend-api.yaml
      - echo "Checking for app.py in api/deploy directory"
      - if [ ! -f "api/deploy/app.py" ]; then echo "App.py not found, creating extract_app.py script"; fi
      - |
        if [ ! -f "api/deploy/app.py" ]; then
          cat > extract_app.py << 'EOF'
#!/usr/bin/env python3
import yaml
import sys

try:
    with open('backend-api.yaml', 'r') as f:
        config = yaml.safe_load(f)
        with open('api/deploy/app.py', 'w') as app_file:
            app_file.write(config.get('app_code', ''))
    print("Successfully extracted app.py from backend-api.yaml")
except Exception as e:
    print(f"Error extracting app.py: {e}")
    sys.exit(1)
EOF
          chmod +x extract_app.py
          python3 extract_app.py
        fi
      
      # Create service file
      - |
        cat > api/deploy/financial-news.service << 'EOF'
        [Unit]
        Description=Financial News Engine Flask App
        After=network.target
        
        [Service]
        User=root
        WorkingDirectory=/opt/financial-news-engine
        Environment="CORS_ALLOWED_ORIGINS=https://financialnewsengine.com,https://www.financialnewsengine.com"
        Environment="FLASK_ENV=production"
        Environment="PYTHONUNBUFFERED=1"
        EnvironmentFile=/opt/financial-news-engine/.env
        ExecStart=/usr/local/bin/gunicorn --workers 3 --bind 0.0.0.0:5000 app:app --access-logfile logs/access.log --error-logfile logs/error.log --capture-output --log-level info
        Restart=always
        TimeoutStartSec=60
        RestartSec=10
        
        [Install]
        WantedBy=multi-user.target
        EOF
      
      # Create deployment script
      - |
        cat > api/deploy/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Create directory if it doesn't exist
        mkdir -p /opt/financial-news-engine
        mkdir -p /opt/financial-news-engine/logs
        
        # Copy files
        cp app.py /opt/financial-news-engine/
        cp requirements.txt /opt/financial-news-engine/
        cp financial-news.service /etc/systemd/system/
        
        # Fetch parameters from SSM
        echo "Fetching credentials from SSM Parameter Store..."
        ES_URL=$(aws ssm get-parameter --name "/financial-news/elasticsearch-url" --with-decryption --query "Parameter.Value" --output text)
        ES_API_KEY=$(aws ssm get-parameter --name "/financial-news/elasticsearch-api-key" --with-decryption --query "Parameter.Value" --output text)
        ES_INDEX=$(aws ssm get-parameter --name "/financial-news/elasticsearch-index" --with-decryption --query "Parameter.Value" --output text)
        
        # Create .env file with environment variables
        cat > /opt/financial-news-engine/.env << EOLENV
        ELASTICSEARCH_URL=$ES_URL
        ELASTICSEARCH_API_KEY=$ES_API_KEY
        ELASTICSEARCH_INDEX=$ES_INDEX
        EOLENV
        chmod 600 /opt/financial-news-engine/.env
        echo "Created .env file with credentials from SSM Parameter Store"
        
        # Install dependencies
        cd /opt/financial-news-engine
        pip3 install -r requirements.txt
        
        # Set permissions
        chmod 755 /opt/financial-news-engine
        
        # Reload and start service
        systemctl daemon-reload
        systemctl enable financial-news.service
        systemctl restart financial-news.service
        
        echo "API deployment completed"
        EOF
      - chmod +x api/deploy/deploy.sh
      
      # Create verification script
      - |
        cat > api/deploy/verify.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "Verifying backend service startup..."
        
        # Wait for the service to start
        for i in {1..12}; do
          if curl -s http://localhost:5000/ping > /dev/null; then
            echo "Service is responding to ping"
            break
          fi
          
          if [ $i -eq 12 ]; then
            echo "ERROR: Service failed to start within 60 seconds"
            exit 1
          fi
          
          echo "Waiting for service to start (attempt $i/12)..."
          sleep 5
        done
        
        echo "Checking diagnostic report endpoint..."
        curl -s -H "Origin: https://financialnewsengine.com" http://localhost:5000/diagnostic/report | grep -q "status" && echo "Diagnostic endpoint working" || echo "WARNING: Diagnostic endpoint not responding properly"
        
        echo "Checking query endpoint..."
        curl -s -H "Origin: https://financialnewsengine.com" "http://localhost:5000/query?query=test" | grep -q "results" && echo "Query endpoint working" || echo "WARNING: Query endpoint not responding properly"
        
        echo "Startup verification successful"
        EOF
      - chmod +x api/deploy/verify.sh
  
  build:
    commands:
      - echo "Getting backend instances from Auto Scaling Group"
      - ASG_NAME=$(aws cloudformation describe-stacks --stack-name $BACKEND_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='BackendAutoScalingGroupName'].OutputValue" --output text)
      - echo "Auto Scaling Group: $ASG_NAME"
      - INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG_NAME --query "AutoScalingGroups[0].Instances[?LifecycleState=='InService'].InstanceId" --output text)
      - echo "Instance IDs: $INSTANCE_IDS"
      - |
        if [ -z "$INSTANCE_IDS" ]; then
          echo "No running instances found in Auto Scaling Group"
          exit 0
        fi
      
      # Upload files to S3 for transfer
      - echo "Uploading deployment files to S3"
      - aws s3 cp api/deploy/app.py s3://financial-news-assets/temp/app.py
      - aws s3 cp api/deploy/requirements.txt s3://financial-news-assets/temp/requirements.txt
      - aws s3 cp api/deploy/financial-news.service s3://financial-news-assets/temp/financial-news.service
      - aws s3 cp api/deploy/deploy.sh s3://financial-news-assets/temp/deploy.sh
      - aws s3 cp api/deploy/verify.sh s3://financial-news-assets/temp/verify.sh
      
      # Deploy to each instance
      - |
        for INSTANCE_ID in $INSTANCE_IDS; do
          echo "Deploying to instance $INSTANCE_ID"
          
          # Create staging directory
          aws ssm send-command --document-name "AWS-RunShellScript" --targets "Key=InstanceIds,Values=$INSTANCE_ID" --parameters "commands=['mkdir -p /tmp/api-deploy']" --comment "Create staging directory" --output text
          
          # Download files and execute deployment
          DEPLOY_CMD="cd /tmp/api-deploy && aws s3 cp s3://financial-news-assets/temp/app.py . && aws s3 cp s3://financial-news-assets/temp/requirements.txt . && aws s3 cp s3://financial-news-assets/temp/financial-news.service . && aws s3 cp s3://financial-news-assets/temp/deploy.sh . && aws s3 cp s3://financial-news-assets/temp/verify.sh . && chmod +x deploy.sh verify.sh && ./deploy.sh && ./verify.sh"
          
          aws ssm send-command --document-name "AWS-RunShellScript" --targets "Key=InstanceIds,Values=$INSTANCE_ID" --parameters "commands=['$DEPLOY_CMD']" --comment "Deploy and verify API" --output text
          
          echo "Deployment to instance $INSTANCE_ID completed"
        done
  
  post_build:
    commands:
      - echo "Creating API configuration YAML"
      - |
        cat > backend-api.yaml << EOF
        ---
        # Financial News Engine API Configuration
        app_code: |
          $(sed 's/^/  /' api/deploy/app.py)
        
        requirements: |
          $(sed 's/^/  /' api/deploy/requirements.txt)
        
        service_definition: |
          $(sed 's/^/  /' api/deploy/financial-news.service)
        
        verification_script: |
          $(sed 's/^/  /' api/deploy/verify.sh)
        EOF
      
      - echo "Uploading API code to S3"
      - aws s3 cp backend-api.yaml s3://financial-news-assets/api/backend-api.yaml
      
      - echo "Starting ASG instance refresh"
      - ASG_NAME=$(aws cloudformation describe-stacks --stack-name $BACKEND_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='BackendAutoScalingGroupName'].OutputValue" --output text)
      - |
        if [ -n "$ASG_NAME" ]; then
          echo "Found ASG: $ASG_NAME"
          REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME --preferences '{"MinHealthyPercentage": 50, "InstanceWarmup": 300}' --query "InstanceRefreshId" --output text)
          
          if [ -n "$REFRESH_ID" ]; then
            echo "Started instance refresh with ID: $REFRESH_ID"
            # We don't wait for completion to avoid timeout issues
          else
            echo "WARNING: Could not start instance refresh"
          fi
        else
          echo "WARNING: Could not find Auto Scaling Group name"
        fi
      
      - echo "API deployment completed"

artifacts:
  files:
    - api/deploy/**/* 