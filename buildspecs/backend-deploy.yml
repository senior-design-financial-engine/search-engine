version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo 'Starting backend deployment process'
      - pip install --upgrade awscli
      - pip install boto3
      - aws --version
  pre_build:
    commands:
      - echo 'Environment variables:'
      - echo ENVIRONMENT=$ENVIRONMENT
      - echo BACKEND_STACK_NAME=$BACKEND_STACK_NAME
      - echo 'Current directory:' $(pwd)
      - ls -la
      - cd backend || echo 'Backend directory not found, proceeding anyway'
      - mkdir -p scripts
      - echo 'Creating deployment scripts...'
      - echo '#!/bin/bash' > scripts/deploy.sh
      - echo 'cd /opt/financial-news-engine' >> scripts/deploy.sh
      - echo 'unzip -o /tmp/backend.zip -d .' >> scripts/deploy.sh
      - echo 'pip3 install -r requirements.txt' >> scripts/deploy.sh
      - echo 'systemctl daemon-reload' >> scripts/deploy.sh
      - echo 'systemctl start financial-news.service' >> scripts/deploy.sh
      - chmod +x scripts/deploy.sh
      - echo '#!/bin/bash' > scripts/before_install.sh
      - echo 'mkdir -p /opt/financial-news-engine' >> scripts/before_install.sh
      - chmod +x scripts/before_install.sh
      - echo '#!/bin/bash' > scripts/create_env_file.sh
      - echo '# Create .env file with environment variables by fetching from SSM Parameter Store' >> scripts/create_env_file.sh
      - echo 'echo "Fetching credentials from SSM Parameter Store..."' >> scripts/create_env_file.sh
      - echo '' >> scripts/create_env_file.sh
      - echo '# Function to get parameters from SSM with proper error handling' >> scripts/create_env_file.sh
      - echo 'function get_parameter() {' >> scripts/create_env_file.sh
      - echo '    local param_name=$1' >> scripts/create_env_file.sh
      - echo '    local default_value=$2' >> scripts/create_env_file.sh
      - echo '    ' >> scripts/create_env_file.sh
      - echo '    echo "Fetching parameter: $param_name"' >> scripts/create_env_file.sh
      - echo '    local value' >> scripts/create_env_file.sh
      - echo '    value=$(aws ssm get-parameter --name "$param_name" --with-decryption --query "Parameter.Value" --output text 2>/dev/null)' >> scripts/create_env_file.sh
      - echo '    local exit_code=$?' >> scripts/create_env_file.sh
      - echo '    ' >> scripts/create_env_file.sh
      - echo '    if [ $exit_code -eq 0 ] && [ -n "$value" ] && [ "$value" != "None" ]; then' >> scripts/create_env_file.sh
      - echo '        echo "Successfully retrieved parameter: $param_name"' >> scripts/create_env_file.sh
      - echo '        echo "$value"' >> scripts/create_env_file.sh
      - echo '    else' >> scripts/create_env_file.sh
      - echo '        echo "WARNING: Failed to retrieve parameter: $param_name - using default value: $default_value"' >> scripts/create_env_file.sh
      - echo '        echo "$default_value"' >> scripts/create_env_file.sh
      - echo '    fi' >> scripts/create_env_file.sh
      - echo '}' >> scripts/create_env_file.sh
      - echo '' >> scripts/create_env_file.sh
      - echo '# Get parameters with default fallbacks' >> scripts/create_env_file.sh
      - echo 'ES_URL=$(get_parameter "/financial-news/elasticsearch-url" "https://your-elasticsearch-endpoint.es.amazonaws.com")' >> scripts/create_env_file.sh
      - echo 'ES_API_KEY=$(get_parameter "/financial-news/elasticsearch-api-key" "default-api-key")' >> scripts/create_env_file.sh
      - echo 'ES_INDEX=$(get_parameter "/financial-news/elasticsearch-index" "financial_news")' >> scripts/create_env_file.sh
      - echo 'ES_SHARDS=$(get_parameter "/financial-news/es-number-of-shards" "3")' >> scripts/create_env_file.sh
      - echo 'ES_REPLICAS=$(get_parameter "/financial-news/es-number-of-replicas" "2")' >> scripts/create_env_file.sh
      - echo 'ENV=$(get_parameter "/financial-news/environment" "development")' >> scripts/create_env_file.sh
      - echo '' >> scripts/create_env_file.sh
      - echo '# Create the .env file' >> scripts/create_env_file.sh
      - echo 'mkdir -p /opt/financial-news-engine' >> scripts/create_env_file.sh
      - echo 'cat > /opt/financial-news-engine/.env << EOL' >> scripts/create_env_file.sh
      - echo 'ELASTICSEARCH_URL=$ES_URL' >> scripts/create_env_file.sh
      - echo 'ELASTICSEARCH_API_KEY=$ES_API_KEY' >> scripts/create_env_file.sh
      - echo 'ELASTICSEARCH_INDEX=$ES_INDEX' >> scripts/create_env_file.sh
      - echo 'ES_NUMBER_OF_SHARDS=$ES_SHARDS' >> scripts/create_env_file.sh
      - echo 'ES_NUMBER_OF_REPLICAS=$ES_REPLICAS' >> scripts/create_env_file.sh
      - echo 'ENVIRONMENT=$ENV' >> scripts/create_env_file.sh
      - echo 'CORS_ALLOWED_ORIGINS=https://financialnewsengine.com,https://www.financialnewsengine.com,http://localhost:3000' >> scripts/create_env_file.sh
      - echo 'EOL' >> scripts/create_env_file.sh
      - echo '' >> scripts/create_env_file.sh
      - echo '# Set secure permissions' >> scripts/create_env_file.sh
      - echo 'chmod 600 /opt/financial-news-engine/.env' >> scripts/create_env_file.sh
      - echo 'echo "Created .env file with environment variables from SSM Parameter Store"' >> scripts/create_env_file.sh
      - chmod +x scripts/create_env_file.sh
      - "echo 'version: 0.0' > appspec.yml"
      - "echo 'os: linux' >> appspec.yml"
      - "echo 'files:' >> appspec.yml"
      - "echo '  - source: dist/backend.zip' >> appspec.yml"
      - "echo '    destination: /tmp/' >> appspec.yml"
      - "echo 'hooks:' >> appspec.yml"
      - "echo '  BeforeInstall:' >> appspec.yml"
      - "echo '    - location: scripts/before_install.sh' >> appspec.yml"
      - "echo '      timeout: 300' >> appspec.yml"
      - "echo '      runas: root' >> appspec.yml"
      - "echo '  AfterInstall:' >> appspec.yml"
      - "echo '    - location: scripts/deploy.sh' >> appspec.yml"
      - "echo '      timeout: 300' >> appspec.yml"
      - "echo '      runas: root' >> appspec.yml"
      - "echo '    - location: scripts/create_env_file.sh' >> appspec.yml"
      - "echo '      timeout: 300' >> appspec.yml"
      - "echo '      runas: root' >> appspec.yml"
  build:
    commands:
      - echo 'Checking AWS CLI configuration:'
      - aws sts get-caller-identity || echo 'AWS credentials issue - continuing anyway'
      - echo 'Checking for backend stack:'
      - aws cloudformation describe-stacks --stack-name $BACKEND_STACK_NAME || echo 'Stack not found or permission issue - continuing deployment anyway'
      - echo 'Listing available stacks:'
      - aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE || echo 'Unable to list stacks - continuing anyway'
      - echo 'Proceeding with simple deployment without AWS CLI dependencies'
      - echo 'Deployment preparation complete'
  post_build:
    commands:
      - echo 'Verifying deployment artifacts:'
      - ls -la
      - echo 'Starting ASG instance refresh to deploy the new code to all instances'
      - |
        # Get the Auto Scaling Group name from the CloudFormation stack
        ASG_NAME=$(aws cloudformation describe-stacks --stack-name $BACKEND_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='BackendAutoScalingGroupName'].OutputValue" --output text)
        
        if [ -n "$ASG_NAME" ]; then
          echo "Found Auto Scaling Group: $ASG_NAME"
          
          # Start an instance refresh with 50% min healthy percentage
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"MinHealthyPercentage": 50, "InstanceWarmup": 300}' \
            --query "InstanceRefreshId" --output text)
          
          if [ -n "$REFRESH_ID" ]; then
            echo "Started instance refresh with ID: $REFRESH_ID"
            
            # Wait for up to 5 minutes for the refresh to complete
            MAX_RETRIES=30
            for i in $(seq 1 $MAX_RETRIES); do
              STATUS=$(aws autoscaling describe-instance-refreshes \
                --auto-scaling-group-name $ASG_NAME \
                --instance-refresh-ids $REFRESH_ID \
                --query "InstanceRefreshes[0].Status" --output text)
              
              echo "Instance refresh status: $STATUS (Attempt $i/$MAX_RETRIES)"
              
              if [ "$STATUS" = "Successful" ]; then
                echo "Instance refresh completed successfully"
                break
              elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
                echo "Instance refresh failed or was cancelled"
                # Continue deployment even if refresh failed - don't fail the build
                break
              fi
              
              if [ $i -eq $MAX_RETRIES ]; then
                echo "Timed out waiting for instance refresh to complete. Current status: $STATUS"
                echo "Deployment will continue, refresh will continue in the background."
              else
                echo "Waiting 10 seconds before checking status again..."
                sleep 10
              fi
            done
          else
            echo "WARNING: Could not start instance refresh. Deployment may require manual instance refresh."
          fi
        else
          echo "WARNING: Could not find Auto Scaling Group name. Instance refresh could not be performed."
        fi
      - echo 'Backend deployment completed successfully'
artifacts:
  files:
    - "backend/appspec.yml"
    - "backend/scripts/**/*"
    - "backend/dist/backend.zip"
  discard-paths: no 