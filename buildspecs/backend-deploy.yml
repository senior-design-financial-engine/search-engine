version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo 'Starting backend deployment process'
      - pip install --upgrade awscli
      - pip install boto3
      - aws --version
  pre_build:
    commands:
      - echo 'Environment variables:'
      - echo ENVIRONMENT=$ENVIRONMENT
      - echo BACKEND_STACK_NAME=$BACKEND_STACK_NAME
      - echo 'Current directory:' $(pwd)
      - ls -la
      - cd backend || echo 'Backend directory not found, proceeding anyway'
      - mkdir -p scripts
      - echo 'Creating deployment scripts...'
      - |
        cat > scripts/deploy.sh << 'EOF'
        #!/bin/bash
        cd /opt/financial-news-engine
        unzip -o /tmp/backend.zip -d .
        pip3 install -r requirements.txt
        systemctl daemon-reload
        systemctl start financial-news.service
        EOF
      - chmod +x scripts/deploy.sh
      - |
        cat > scripts/before_install.sh << 'EOF'
        #!/bin/bash
        mkdir -p /opt/financial-news-engine
        EOF
      - chmod +x scripts/before_install.sh
      - |
        cat > scripts/create_env_file.sh << 'EOF'
        #!/bin/bash
        # Create .env file with environment variables by fetching from SSM Parameter Store
        echo "Fetching credentials from SSM Parameter Store..."

        # Function to get parameters from SSM with proper error handling
        function get_parameter() {
            local param_name=$1
            local default_value=$2
            
            echo "Fetching parameter: $param_name"
            local value
            value=$(aws ssm get-parameter --name "$param_name" --with-decryption --query "Parameter.Value" --output text 2>/dev/null)
            local exit_code=$?
            
            if [ $exit_code -eq 0 ] && [ -n "$value" ] && [ "$value" != "None" ]; then
                echo "Successfully retrieved parameter: $param_name"
                echo "$value"
            else
                echo "WARNING: Failed to retrieve parameter: $param_name - using default value: $default_value"
                echo "$default_value"
            fi
        }

        # Get parameters with default fallbacks
        ES_URL=$(get_parameter "/financial-news/elasticsearch-url" "https://your-elasticsearch-endpoint.es.amazonaws.com")
        ES_API_KEY=$(get_parameter "/financial-news/elasticsearch-api-key" "default-api-key")
        ES_INDEX=$(get_parameter "/financial-news/elasticsearch-index" "financial_news")
        ES_SHARDS=$(get_parameter "/financial-news/es-number-of-shards" "3")
        ES_REPLICAS=$(get_parameter "/financial-news/es-number-of-replicas" "2")
        ENV=$(get_parameter "/financial-news/environment" "development")

        # Create the .env file
        mkdir -p /opt/financial-news-engine
        cat > /opt/financial-news-engine/.env << EOL
        ELASTICSEARCH_URL=$ES_URL
        ELASTICSEARCH_API_KEY=$ES_API_KEY
        ELASTICSEARCH_INDEX=$ES_INDEX
        ES_NUMBER_OF_SHARDS=$ES_SHARDS
        ES_NUMBER_OF_REPLICAS=$ES_REPLICAS
        ENVIRONMENT=$ENV
        CORS_ALLOWED_ORIGINS=https://financialnewsengine.com,https://www.financialnewsengine.com,http://localhost:3000
        EOL

        # Set secure permissions
        chmod 600 /opt/financial-news-engine/.env
        echo "Created .env file with environment variables from SSM Parameter Store"
        EOF
      - chmod +x scripts/create_env_file.sh
      - |
        cat > appspec.yml << 'EOF'
        version: 0.0
        os: linux
        files:
          - source: dist/backend.zip
            destination: /tmp/
        hooks:
          BeforeInstall:
            - location: scripts/before_install.sh
              timeout: 300
              runas: root
          AfterInstall:
            - location: scripts/deploy.sh
              timeout: 300
              runas: root
            - location: scripts/create_env_file.sh
              timeout: 300
              runas: root
        EOF
  build:
    commands:
      - echo 'Checking AWS CLI configuration:'
      - aws sts get-caller-identity || echo 'AWS credentials issue - continuing anyway'
      - echo 'Checking for backend stack:'
      - aws cloudformation describe-stacks --stack-name $BACKEND_STACK_NAME || echo 'Stack not found or permission issue - continuing deployment anyway'
      - echo 'Listing available stacks:'
      - aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE || echo 'Unable to list stacks - continuing anyway'
      - echo 'Proceeding with simple deployment without AWS CLI dependencies'
      - echo 'Deployment preparation complete'
  post_build:
    commands:
      - echo 'Verifying deployment artifacts:'
      - ls -la
      - echo 'Starting ASG instance refresh to deploy the new code to all instances'
      - |
        # Get the Auto Scaling Group name from the CloudFormation stack
        ASG_NAME=$(aws cloudformation describe-stacks --stack-name $BACKEND_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='BackendAutoScalingGroupName'].OutputValue" --output text)
        
        if [ -n "$ASG_NAME" ]; then
          echo "Found Auto Scaling Group: $ASG_NAME"
          
          # Start an instance refresh with 50% min healthy percentage
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME \
            --preferences '{"MinHealthyPercentage": 50, "InstanceWarmup": 300}' \
            --query "InstanceRefreshId" --output text)
          
          if [ -n "$REFRESH_ID" ]; then
            echo "Started instance refresh with ID: $REFRESH_ID"
            
            # Wait for up to 5 minutes for the refresh to complete
            MAX_RETRIES=30
            for i in $(seq 1 $MAX_RETRIES); do
              STATUS=$(aws autoscaling describe-instance-refreshes \
                --auto-scaling-group-name $ASG_NAME \
                --instance-refresh-ids $REFRESH_ID \
                --query "InstanceRefreshes[0].Status" --output text)
              
              echo "Instance refresh status: $STATUS (Attempt $i/$MAX_RETRIES)"
              
              if [ "$STATUS" = "Successful" ]; then
                echo "Instance refresh completed successfully"
                break
              elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ]; then
                echo "Instance refresh failed or was cancelled"
                # Continue deployment even if refresh failed - don't fail the build
                break
              fi
              
              if [ $i -eq $MAX_RETRIES ]; then
                echo "Timed out waiting for instance refresh to complete. Current status: $STATUS"
                echo "Deployment will continue, refresh will continue in the background."
              else
                echo "Waiting 10 seconds before checking status again..."
                sleep 10
              fi
            done
          else
            echo "WARNING: Could not start instance refresh. Deployment may require manual instance refresh."
          fi
        else
          echo "WARNING: Could not find Auto Scaling Group name. Instance refresh could not be performed."
        fi
      - echo 'Backend deployment completed successfully'
artifacts:
  files:
    - "backend/appspec.yml"
    - "backend/scripts/**/*"
    - "backend/dist/backend.zip"
  discard-paths: no 